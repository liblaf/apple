from collections.abc import Iterable
from typing import Any, Protocol, overload, runtime_checkable

from ._as_key import Node

@runtime_checkable
class SupportsKeysAndGetItem[KT, VT](Protocol):
    def keys(self) -> Iterable[KT]: ...
    def __getitem__(self, key: KT, /) -> VT: ...

@overload
def as_dict[KT, VT](data: SupportsKeysAndGetItem[KT, VT], /) -> dict[KT, VT]: ...
@overload
def as_dict[KT, VT](data: Iterable[tuple[KT, VT]], /) -> dict[KT, VT]: ...
@overload
def as_dict[T: Node](data: Iterable[T], /) -> dict[str, T]: ...
@overload
def as_dict(data: None, /) -> dict[Any, Any]: ...
