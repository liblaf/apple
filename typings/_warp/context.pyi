from collections.abc import Callable
from typing import dataclass_transform, overload

class Kernel: ...

@overload
def func[C: Callable](f: C, *, name: str | None = None) -> C: ...
@overload
def func[C: Callable](*, name: str | None = None) -> Callable[[C], C]: ...
@overload
def kernel(f: Callable, **kwargs) -> Kernel: ...
@overload
def kernel(**kwargs) -> Callable[[Callable], Kernel]: ...
@dataclass_transform()
def struct[T: type](c: T) -> T: ...

__all__ = ["Kernel", "func", "kernel", "struct"]
