# ruff: noqa: N801, UP046, UP047, PYI001

from collections.abc import Sequence
from typing import Any, Generic, Literal, Self, TypeVar, type_check_only

Cols = TypeVar("Cols", bound=int)
Float = TypeVar("Float", bound=float)
Length = TypeVar("Length", bound=int)
Rows = TypeVar("Rows", bound=int)
Scalar = TypeVar("Scalar", bound=int | float)
DType = TypeVar("DType", bound=type)

@type_check_only
class Operators:
    def __add__(self, other: Any) -> Self: ...
    def __sub__(self, other: Any) -> Self: ...
    def __mul__(self, other: Any) -> Self: ...
    def __matmul__(self, other: Any) -> Self: ...
    def __truediv__(self, other: Any) -> Self: ...
    def __floordiv__(self, other: Any) -> Self: ...
    def __pow__(self, other: Any) -> Self: ...
    def __radd__(self, other: Any) -> Self: ...
    def __rsub__(self, other: Any) -> Self: ...
    def __rmul__(self, other: Any) -> Self: ...
    def __rmatmul__(self, other: Any) -> Self: ...
    def __rtruediv__(self, other: Any) -> Self: ...
    def __rfloordiv__(self, other: Any) -> Self: ...

class float32(float): ...
class int32(int): ...
class uint64(int): ...

class Vector(Generic[Length, Scalar], Operators):
    def __init__(self, *args, **kwargs) -> None: ...

class vec2(Vector[Literal[2], float]): ...
class vec3(Vector[Literal[3], float]): ...
class vec3f(Vector[Literal[3], float32]): ...

class Matrix(Generic[Rows, Cols, Scalar], Operators):
    def __init__(self, *args, **kwargs) -> None: ...

class Array(Generic[DType], Operators): ...

def array(*, dtype: DType) -> type[Array[DType]]: ...
def matrix(shape: Sequence[int], dtype: type) -> type[Matrix]: ...
def vector(length: int, dtype: type) -> type[Vector]: ...

class Mesh:
    def __init__(
        self,
        points: Array,
        indices: Array,
        velocities: Array | None = None,
        support_winding_number: bool = False,
        bvh_constructor: str | None = None,
    ) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def points(self) -> Array: ...
    @points.setter
    def points(self, value: Array) -> None: ...
    def refit(self) -> None: ...

# region Geometry

@type_check_only
class MeshQueryPoint:
    @property
    def result(self) -> bool: ...
    @property
    def sign(self) -> float32: ...
    @property
    def face(self) -> int32: ...
    @property
    def u(self) -> float32: ...
    @property
    def v(self) -> float32: ...

# endregion Geometry

__all__ = [
    "Mesh",
    "Scalar",
    "array",
    "array",
    "int32",
    "matrix",
    "vec2",
    "vec3",
    "vector",
]
