import warp as wp
from _typeshed import Incomplete
from typing import Callable, Sequence

__all__ = ['gradcheck', 'gradcheck_tape', 'jacobian', 'jacobian_fd', 'jacobian_plot']

def gradcheck(function: wp.Kernel | Callable, dim: tuple[int] | None = None, inputs: Sequence | None = None, outputs: Sequence | None = None, *, eps: float = 0.0001, atol: float = 0.001, rtol: float = 0.01, raise_exception: bool = True, input_output_mask: list[tuple[str | int, str | int]] | None = None, device: wp.context.Devicelike = None, max_blocks: int = 0, block_dim: int = 256, max_inputs_per_var: int = -1, max_outputs_per_var: int = -1, plot_relative_error: bool = False, plot_absolute_error: bool = False, show_summary: bool = True) -> bool: ...
def gradcheck_tape(tape: wp.Tape, *, eps: float = 0.0001, atol: float = 0.001, rtol: float = 0.01, raise_exception: bool = True, input_output_masks: dict[str, list[tuple[str | int, str | int]]] | None = None, blacklist_kernels: list[str] | None = None, whitelist_kernels: list[str] | None = None, max_inputs_per_var: int = -1, max_outputs_per_var: int = -1, plot_relative_error: bool = False, plot_absolute_error: bool = False, show_summary: bool = True, reverse_launches: bool = False, skip_to_launch_index: int = 0) -> bool: ...

class FunctionMetadata:
    key: Incomplete
    input_labels: Incomplete
    output_labels: Incomplete
    input_strides: Incomplete
    output_strides: Incomplete
    input_dtypes: Incomplete
    output_dtypes: Incomplete
    def __init__(self, key: str | None = None, input_labels: list[str] | None = None, output_labels: list[str] | None = None, input_strides: list[tuple] | None = None, output_strides: list[tuple] | None = None, input_dtypes: list | None = None, output_dtypes: list | None = None) -> None: ...
    @property
    def is_empty(self): ...
    def input_is_array(self, i: int): ...
    def output_is_array(self, i: int): ...
    def update_from_kernel(self, kernel: wp.Kernel, inputs: Sequence): ...
    def update_from_function(self, function: Callable, inputs: Sequence, outputs: Sequence | None = None): ...

def jacobian_plot(jacobians: dict[tuple[int, int], wp.array], kernel: FunctionMetadata | wp.Kernel, inputs: Sequence | None = None, show_plot: bool = True, show_colorbar: bool = True, scale_colors_per_submatrix: bool = False, title: str | None = None, colormap: str = 'coolwarm', log_scale: bool = False): ...
def jacobian(function: wp.Kernel | Callable, dim: tuple[int] | None = None, inputs: Sequence | None = None, outputs: Sequence | None = None, input_output_mask: list[tuple[str | int, str | int]] | None = None, device: wp.context.Devicelike = None, max_blocks: int = 0, block_dim: int = 256, max_outputs_per_var: int = -1, plot_jacobians: bool = False, metadata: FunctionMetadata | None = None) -> dict[tuple[int, int], wp.array]: ...
def jacobian_fd(function: wp.Kernel | Callable, dim: tuple[int] | None | None = None, inputs: Sequence | None = None, outputs: Sequence | None = None, input_output_mask: list[tuple[str | int, str | int]] | None = None, device: wp.context.Devicelike = None, max_blocks: int = 0, block_dim: int = 256, max_inputs_per_var: int = -1, eps: float = 0.0001, plot_jacobians: bool = False, metadata: FunctionMetadata | None = None) -> dict[tuple[int, int], wp.array]: ...
