from warp.types import *
from _typeshed import Incomplete
from warp.thirdparty import appdirs as appdirs

nvJitLink_input_type: Incomplete

def build_cuda(cu_path, arch, output_path, config: str = 'release', verify_fp: bool = False, fast_math: bool = False, fuse_fp: bool = True, lineinfo: bool = False, compile_time_trace: bool = False, ltoirs=None, fatbins=None) -> None: ...
def load_cuda(input_path, device): ...
def build_cpu(obj_path, cpp_path, mode: str = 'release', verify_fp: bool = False, fast_math: bool = False, fuse_fp: bool = True) -> None: ...
def init_kernel_cache(path=None) -> None: ...
def clear_kernel_cache() -> None: ...
def clear_lto_cache() -> None: ...
def safe_rename(src, dst, attempts: int = 5, delay: float = 0.1) -> None: ...
def hash_symbol(symbol): ...
def get_lto_cache_dir(): ...
def get_cached_lto(path): ...
def get_cached_lto_meta(path, symbol): ...
def build_lto_dot(M, N, K, adtype, bdtype, cdtype, alayout, blayout, clayout, arch, num_threads, builder): ...
def build_lto_solver(M, N, NRHS, solver, solver_enum, side_enum, diag_enum, alayout, blayout, fill_mode, arch, precision_enum, num_threads, parameter_list, builder): ...
def build_lto_fft(arch, size, ept, direction, dir, precision, builder): ...
