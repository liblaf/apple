from warp.types import *
import warp.context
from .context import add_builtin as add_builtin
from _typeshed import Incomplete
from typing import Any, Mapping, TypeVar
from warp.codegen import Reference as Reference, Var as Var, get_arg_value as get_arg_value, strip_reference as strip_reference

def seq_check_equal(seq_1, seq_2): ...
def sametypes(arg_types: Mapping[str, Any]): ...
def sametypes_create_value_func(default: TypeVar): ...
def extract_tuple(arg, as_constant: bool = False): ...
def static_len_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def scalar_infer_type(arg_types: Mapping[str, type] | tuple[type, ...] | None): ...
def scalar_sametypes_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def float_infer_type(arg_types: Mapping[str, type]): ...
def float_sametypes_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def outer_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def inverse_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def determinant_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def trace_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def diag_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def get_diag_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...

scalar_types_all: Incomplete

def vector_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def vector_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def matrix_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matrix_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def matrix_initializer_list_func(args, return_type): ...
def matrix_from_vecs_create_value_func(cols: bool): ...
def matrix_from_vecs_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def matrix_from_vecs_initializer_list_func(args, return_type): ...
def identity_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def identity_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def matrix_transform_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matrix_transform_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def svd3_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def svd2_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def qr3_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def eig3_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def quaternion_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def quaternion_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def quat_identity_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def quat_identity_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def quat_to_axis_angle_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def transformation_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def transformation_pq_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def transformation_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def transform_identity_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def transform_identity_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def spatial_vector_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def spatial_vector_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_zeros_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tile_zeros_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_ones_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tile_ones_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_arange_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tile_arange_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_load_tuple_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tile_load_tuple_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_store_value_func(arg_types, arg_values) -> None: ...
def tile_store_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_atomic_add_value_func(arg_types, arg_values): ...
def tile_atomic_add_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_view_value_func(arg_types, arg_values): ...
def tile_view_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_squeeze_value_func(arg_types, arg_values): ...
def tile_squeeze_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_reshape_value_func(arg_types, arg_values): ...
def tile_reshape_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_astype_value_func(arg_types, arg_values): ...
def tile_astype_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_assign_value_func(arg_types, arg_values) -> None: ...
def tile_assign_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_value_func(arg_types, arg_values): ...
def tile_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def untile_value_func(arg_types, arg_values): ...
def tile_extract_value_func(arg_types, arg_values): ...
def tile_inplace_value_func(arg_types, arg_values) -> None: ...
def tile_transpose_value_func(arg_types, arg_values): ...
def tile_broadcast_value_func(arg_types, arg_values): ...
def tile_broadcast_dispatch_func(arg_types: Mapping[str, type], return_type: Any, arg_values: Mapping[str, Var]): ...
def tile_sum_value_func(arg_types, arg_values): ...
def tile_sort_value_func(arg_types, arg_values) -> None: ...
def tile_min_value_func(arg_types, arg_values): ...
def tile_argmin_value_func(arg_types, arg_values): ...
def tile_max_value_func(arg_types, arg_values): ...
def tile_argmax_value_func(arg_types, arg_values): ...
def tile_reduce_value_func(arg_types, arg_values): ...
def tile_reduce_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_scan_inclusive_value_func(arg_types, arg_values): ...
def tile_scan_inclusive_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_scan_exclusive_value_func(arg_types, arg_values): ...
def tile_scan_exclusive_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_unary_map_value_func(arg_types, arg_values): ...
def tile_binary_map_value_func(arg_types, arg_values): ...
def check_volume_value_grad_compatibility(dtype, grad_dtype) -> None: ...
def volume_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def volume_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def volume_sample_grad_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def volume_sample_grad_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def volume_lookup_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def volume_lookup_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def volume_store_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def volume_sample_index_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def volume_sample_grad_index_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def printf_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def printf_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def select_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def array_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def array_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def address_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def view_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def array_store_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def store_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def store_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def load_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...

SUPPORTED_ATOMIC_TYPES: Incomplete

def atomic_op_constraint(arg_types: Mapping[str, Any]): ...
def create_atomic_op_value_func(op: str): ...
def atomic_op_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...

hidden: Incomplete

def extract_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def vector_index_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def vector_index_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def vector_assign_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matrix_index_row_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matrix_index_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matrix_vector_sametype(arg_types: Mapping[str, Any]): ...
def matrix_assign_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def expect_eq_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def lerp_constraint(arg_types: Mapping[str, type]): ...
def lerp_create_value_func(default): ...
def expect_near_constraint(arg_types: Mapping[str, type]): ...
def scalar_mul_create_value_func(default): ...
def matvec_mul_constraint(arg_types: Mapping[str, type]): ...
def matvec_mul_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def mul_vecmat_constraint(arg_types: Mapping[str, type]): ...
def mul_vecmat_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def matmat_mul_constraint(arg_types: Mapping[str, type]): ...
def matmat_mul_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tile_unary_value_func(arg_types, arg_values): ...
def tile_scalar_mul_value_func(arg_types, arg_values): ...
def tile_inplace_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tile_diag_add_value_func(arg_types, arg_values): ...
def tile_diag_add_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_matmul_out_value_func(arg_types, arg_values) -> None: ...
def tile_matmul_value_func(arg_types, arg_values): ...
def tile_matmul_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_fft_generic_value_func(arg_types, arg_values): ...
def tile_fft_generic_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder, direction: str | None = None): ...
def tile_cholesky_generic_value_func(arg_types, arg_values): ...

cusolver_function_map: Incomplete
cusolver_type_map: Incomplete
cusolver_fill_mode_map: Incomplete
cusolver_side_map: Incomplete
cusolver_diag_map: Incomplete

def tile_cholesky_generic_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_cholesky_solve_generic_value_func(arg_types, arg_values): ...
def tile_cholesky_solve_generic_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_lower_solve_generic_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_lower_solve_generic_value_func(arg_types, arg_values): ...
def tile_upper_solve_generic_lto_dispatch_func(arg_types: Mapping[str, type], return_type: Any, return_values: List[Var], arg_values: Mapping[str, Var], options: Mapping[str, Any], builder: warp.context.ModuleBuilder): ...
def tile_upper_solve_generic_value_func(arg_types, arg_values): ...
def static(expr): ...
def tuple_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tuple_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
def tuple_extract_value_func(arg_types: Mapping[str, type], arg_values: Mapping[str, Any]): ...
def tuple_extract_dispatch_func(input_types: Mapping[str, type], return_type: Any, args: Mapping[str, Var]): ...
