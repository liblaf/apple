import ast
import warp as wp
from _typeshed import Incomplete
from typing import Any, Callable
from warp.codegen import get_annotations as get_annotations
from warp.fem.operator import Integrand as Integrand
from warp.fem.types import Domain as Domain, Field as Field

def get_func(func, suffix: str, code_transformers=None): ...
def dynamic_func(suffix: str, code_transformers=None): ...
def get_kernel(func, suffix: str, kernel_options: dict[str, Any] | None = None): ...
def dynamic_kernel(suffix: str, kernel_options: dict[str, Any] | None = None): ...
def get_struct(struct: type, suffix: str): ...
def dynamic_struct(suffix: str): ...
def get_argument_struct(arg_types: dict[str, type]): ...
def populate_argument_struct(Args: wp.codegen.Struct, values: dict[str, Any], func_name: str, value_struct_values: Incomplete = None): ...

class ExpandStarredArgumentStruct(ast.NodeTransformer):
    def __init__(self, structs: dict[str, wp.codegen.Struct]) -> None: ...
    def visit_Call(self, call: ast.Call): ...

def get_integrand_function(integrand: Integrand, suffix: str, func=None, annotations=None, code_transformers=None): ...
def get_integrand_kernel(integrand: Integrand, suffix: str, kernel_fn: Callable | None = None, kernel_options: dict[str, Any] | None = None, code_transformers=None): ...
def cached_arg_value(func: Callable): ...
def setup_dynamic_attributes(obj, cls: type | None = None, constructors: dict[str, Callable] | None = None, key: str | None = None): ...
def cached_vec_type(length, dtype): ...
def cached_mat_type(shape, dtype): ...

class Temporary:
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, array: wp.array, pool: TemporaryStore.Pool | None = None, shape=None, dtype=None) -> None: ...
    def detach(self) -> wp.array: ...
    def release(self) -> None: ...
    @property
    def array(self) -> wp.array: ...
    def __del__(self) -> None: ...

class TemporaryStore:
    class Pool:
        dtype: Incomplete
        device: Incomplete
        pinned: Incomplete
        def __init__(self, dtype, device, pinned: bool) -> None: ...
        def borrow(self, shape, dtype, requires_grad: bool): ...
        def redeem(self, array) -> None: ...
        def detach(self, array) -> None: ...
        def hold(self, temp: Temporary): ...
        def stop_holding(self, temp: Temporary): ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def borrow(self, shape, dtype, pinned: bool = False, device=None, requires_grad: bool = False) -> Temporary: ...

def set_default_temporary_store(temporary_store: TemporaryStore | None): ...
def borrow_temporary(temporary_store: TemporaryStore | None, shape: int | tuple[int], dtype: type, pinned: bool = False, requires_grad: bool = False, device=None) -> Temporary: ...
def borrow_temporary_like(array: wp.array | Temporary, temporary_store: TemporaryStore | None) -> Temporary: ...
def capture_event(device=None): ...
def synchronize_event(event: wp.Event | None): ...
