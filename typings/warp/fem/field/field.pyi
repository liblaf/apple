import warp as wp
from _typeshed import Incomplete
from typing import Any
from warp.fem import cache as cache
from warp.fem.domain import GeometryDomain as GeometryDomain, Sides as Sides
from warp.fem.geometry import DeformedGeometry as DeformedGeometry, Geometry as Geometry
from warp.fem.operator import Operator as Operator, integrand as integrand
from warp.fem.space import FunctionSpace as FunctionSpace, SpacePartition as SpacePartition
from warp.fem.types import ElementKind as ElementKind, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, Sample as Sample
from warp.fem.utils import type_zero_element as type_zero_element

class FieldLike:
    EvalArg: wp.codegen.Struct
    ElementEvalArg: wp.codegen.Struct
    def eval_arg_value(self, device) -> EvalArg: ...
    def fill_eval_arg(self, arg: FieldLike.EvalArg, device): ...
    @property
    def degree(self) -> int: ...
    @property
    def name(self) -> str: ...
    def gradient_valid(self) -> bool: ...
    def divergence_valid(self) -> bool: ...
    @staticmethod
    def eval_inner(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_grad_inner(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_div_inner(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_outer(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_grad_outer(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_div_outer(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_degree(args: ElementEvalArg): ...
    def notify_operator_usage(self, ops: set[Operator]): ...

class GeometryField(FieldLike):
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    @staticmethod
    def eval_reference_grad_inner(args: ElementEvalArg, s: Sample): ...
    @staticmethod
    def eval_reference_grad_outer(args: ElementEvalArg, s: Sample): ...
    def trace(self) -> FieldLike: ...
    def make_deformed_geometry(self, relative: bool = True) -> Geometry: ...
    @property
    def gradient_dtype(self): ...
    @property
    def reference_gradient_dtype(self): ...
    @property
    def divergence_dtype(self): ...

class SpaceField(GeometryField):
    gradient_valid: Incomplete
    divergence_valid: Incomplete
    def __init__(self, space: FunctionSpace, space_partition: SpacePartition) -> None: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    @property
    def space(self) -> FunctionSpace: ...
    @property
    def space_partition(self) -> SpacePartition: ...
    @property
    def degree(self) -> int: ...
    @property
    def dtype(self) -> type: ...
    @property
    def dof_dtype(self) -> type: ...

class DiscreteField(SpaceField):
    @property
    def dof_values(self) -> wp.array: ...
    @dof_values.setter
    def dof_values(self, values: wp.array): ...
    @staticmethod
    def set_node_value(args: FieldLike.EvalArg, node_index: int, value: Any): ...
    @property
    def name(self) -> str: ...

class ImplicitField(GeometryField):
    domain: Incomplete
    EvalArg: Incomplete
    def __init__(self, domain: GeometryDomain, func: wp.Function, values: dict[str, Any] | None = None, grad_func: wp.Function | None = None, div_func: wp.Function | None = None, degree: int = 0) -> None: ...
    @property
    def values(self): ...
    @values.setter
    def values(self, v) -> None: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    def eval_arg_value(self, device): ...
    def fill_eval_arg(self, arg, device) -> None: ...
    @property
    def degree(self) -> int: ...
    @property
    def name(self) -> str: ...
    def gradient_valid(self) -> bool: ...
    def divergence_valid(self) -> bool: ...
    def trace(self): ...

class UniformField(GeometryField):
    domain: Incomplete
    dtype: Incomplete
    def __init__(self, domain: GeometryDomain, value: Any) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, v) -> None: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    def eval_arg_value(self, device): ...
    def fill_eval_arg(self, arg, device) -> None: ...
    @property
    def degree(self) -> int: ...
    def gradient_valid(self) -> bool: ...
    def divergence_valid(self) -> bool: ...
    @property
    def name(self) -> str: ...
    def trace(self): ...

class NonconformingField(GeometryField):
    domain: Incomplete
    field: Incomplete
    dtype: Incomplete
    background: Incomplete
    def __init__(self, domain: GeometryDomain, field: DiscreteField, background: Any = 0.0) -> None: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    def eval_arg_value(self, device): ...
    def fill_eval_arg(self, arg, device) -> None: ...
    @property
    def degree(self) -> int: ...
    def gradient_valid(self) -> bool: ...
    def divergence_valid(self) -> bool: ...
    @property
    def name(self) -> str: ...
    def trace(self): ...
