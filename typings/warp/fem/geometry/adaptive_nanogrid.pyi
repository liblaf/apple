import warp as wp
from .element import Cube as Cube, Square as Square
from .geometry import Geometry as Geometry
from .nanogrid import Nanogrid as Nanogrid
from _typeshed import Incomplete
from warp.fem import cache as cache, utils as utils
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, OUTSIDE as OUTSIDE, Sample as Sample, make_free_sample as make_free_sample

class AdaptiveNanogridCellArg:
    cell_grid: wp.uint64
    cell_ijk: None
    cell_level: None
    inverse_transform: wp.mat33
    cell_volume: float
    level_count: int

class AdaptiveNanogridSideArg:
    cell_arg: AdaptiveNanogridCellArg
    face_ijk: None
    face_cell_indices: None
    face_flags: None
    face_areas: wp.vec3

class AdaptiveNanogrid(Geometry):
    dimension: int
    level_count: Incomplete
    def __init__(self, cell_grid: wp.Volume, cell_level: wp.array, level_count: int, temporary_store: cache.TemporaryStore) -> None: ...
    @property
    def cell_grid(self) -> wp.Volume: ...
    @property
    def vertex_grid(self) -> wp.Volume: ...
    @property
    def face_grid(self) -> wp.Volume: ...
    def cell_count(self): ...
    def vertex_count(self): ...
    def side_count(self): ...
    def boundary_side_count(self): ...
    @property
    def stacked_face_grid(self) -> wp.Volume: ...
    def stacked_face_count(self): ...
    @property
    def stacked_edge_grid(self) -> wp.Volume: ...
    def stacked_edge_count(self): ...
    def reference_cell(self) -> Cube: ...
    def reference_side(self) -> Square: ...
    @property
    def transform(self): ...
    CellArg = AdaptiveNanogridCellArg
    @cache.cached_arg_value
    def cell_arg_value(self, device) -> CellArg: ...
    def fill_cell_arg(self, arg: CellArg, device): ...
    @wp.func
    def cell_position(args: CellArg, s: Sample): ...
    @wp.func
    def cell_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_inverse_deformation_gradient(args: CellArg, s: Sample): ...
    def supports_cell_lookup(self, device): ...
    @wp.func
    def cell_coordinates(args: AdaptiveNanogridCellArg, cell_index: int, pos: wp.vec3): ...
    @wp.func
    def cell_closest_point(args: AdaptiveNanogridCellArg, cell_index: int, pos: wp.vec3): ...
    def make_filtered_cell_lookup(self, filter_func: wp.Function = None): ...
    @wp.func
    def cell_measure(args: CellArg, s: Sample): ...
    @wp.func
    def cell_normal(args: CellArg, s: Sample): ...
    SideIndexArg = Nanogrid.SideIndexArg
    side_index_arg_value: Incomplete
    fill_side_index_arg: Incomplete
    SideArg = AdaptiveNanogridSideArg
    @wp.func
    def side_to_cell_arg(side_arg: SideArg): ...
    @cache.cached_arg_value
    def side_arg_value(self, device) -> SideArg: ...
    def fill_side_arg(self, arg: SideArg, device): ...
    @wp.func
    def boundary_side_index(args: SideIndexArg, boundary_side_index: int): ...
    @wp.func
    def side_position(args: SideArg, s: Sample): ...
    @wp.func
    def side_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_outer_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure_ratio(args: SideArg, s: Sample): ...
    @wp.func
    def side_normal(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_cell_index(args: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_outer_cell_index(args: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_inner_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_outer_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_from_cell_coords(args: SideArg, side_index: ElementIndex, element_index: ElementIndex, element_coords: Coords): ...
    @wp.func
    def side_coordinates(args: SideArg, side_index: int, pos: wp.vec3): ...
    @wp.func
    def side_closest_point(args: SideArg, side_index: int, pos: wp.vec3): ...
    @wp.func
    def coarse_ijk(ijk: wp.vec3i, level: int): ...
    @wp.func
    def fine_ijk(ijk: wp.vec3i, level: int): ...
    @wp.func
    def encode_axis_and_level(ijk: wp.vec3i, axis: int, level: int): ...
    @wp.func
    def find_cell(cell_grid: wp.uint64, ijk: wp.vec3i, level_count: int, cell_level: None): ...
