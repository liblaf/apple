import warp as wp
from warp.fem.polynomial import Polynomial as Polynomial, quadrature_1d as quadrature_1d
from warp.fem.types import Coords as Coords

class Element:
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial) -> tuple[list[Coords], list[float]]: ...
    @classmethod
    def center(cls) -> Coords: ...
    @wp.func
    def project(v: Coords): ...

class Cube(Element):
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial): ...

class Square(Element):
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial): ...

class LinearEdge(Element):
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial): ...

class Triangle(Element):
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial): ...
    @wp.func
    def project(v: Coords): ...
    @wp.func
    def coord_delta(ref_delta: wp.vec2): ...

class Tetrahedron(Element):
    dimension: int
    @staticmethod
    def measure() -> float: ...
    @staticmethod
    def instantiate_quadrature(order: int, family: Polynomial): ...
    @wp.func
    def project(v: Coords): ...
