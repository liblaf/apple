import warp as wp
from .element import Element as Element
from functools import cached_property as cached_property
from typing import Any
from warp.fem import cache as cache
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, ElementKind as ElementKind, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, OUTSIDE as OUTSIDE, Sample as Sample, make_free_sample as make_free_sample

class Geometry:
    dimension: int
    def cell_count(self) -> None: ...
    def side_count(self) -> None: ...
    def boundary_side_count(self) -> None: ...
    def reference_cell(self) -> Element: ...
    def reference_side(self) -> Element: ...
    @property
    def cell_dimension(self) -> int: ...
    @property
    def base(self) -> Geometry: ...
    @property
    def name(self) -> str: ...
    CellArg: wp.codegen.Struct
    SideArg: wp.codegen.Struct
    SideIndexArg: wp.codegen.Struct
    def cell_arg_value(self, device) -> Geometry.CellArg: ...
    def fill_cell_arg(self, args: Geometry.CellArg, device): ...
    @staticmethod
    def cell_position(args: Geometry.CellArg, s: Sample): ...
    @staticmethod
    def cell_deformation_gradient(args: Geometry.CellArg, s: Sample): ...
    @staticmethod
    def cell_inverse_deformation_gradient(args: Geometry.CellArg, s: Sample): ...
    @staticmethod
    def cell_measure(args: Geometry.CellArg, s: Sample): ...
    @wp.func
    def cell_measure_ratio(args: Any, s: Sample): ...
    @staticmethod
    def cell_normal(args: Geometry.CellArg, s: Sample): ...
    def side_arg_value(self, device) -> Geometry.SideArg: ...
    def fill_side_arg(self, args: Geometry.SideArg, device): ...
    @staticmethod
    def boundary_side_index(args: Geometry.SideIndexArg, boundary_side_index: int): ...
    @staticmethod
    def side_position(args: Geometry.SideArg, s: Sample): ...
    @staticmethod
    def side_deformation_gradient(args: Geometry.SideArg, s: Sample): ...
    @staticmethod
    def side_inner_inverse_deformation_gradient(args: Geometry.Siderg, side_index: ElementIndex, coords: Coords): ...
    @staticmethod
    def side_outer_inverse_deformation_gradient(args: Geometry.CellArg, side_index: ElementIndex, coords: Coords): ...
    @staticmethod
    def side_measure(args: Geometry.SideArg, s: Sample): ...
    @staticmethod
    def side_measure_ratio(args: Geometry.SideArg, s: Sample): ...
    @staticmethod
    def side_normal(args: Geometry.SideArg, s: Sample): ...
    @staticmethod
    def side_inner_cell_index(args: Geometry.SideArg, side_index: ElementIndex): ...
    @staticmethod
    def side_outer_cell_index(args: Geometry.SideArg, side_index: ElementIndex): ...
    @staticmethod
    def side_inner_cell_coords(args: Geometry.SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @staticmethod
    def side_outer_cell_coords(args: Geometry.SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @staticmethod
    def side_from_cell_coords(args: Geometry.SideArg, side_index: ElementIndex, element_index: ElementIndex, element_coords: Coords): ...
    @staticmethod
    def side_to_cell_arg(side_arg: Geometry.SideArg): ...
    def make_filtered_cell_lookup(self, filter_func: wp.Function = None): ...
    @cached_property
    def cell_lookup(self) -> wp.Function: ...
    def supports_cell_lookup(self, device) -> bool: ...
    def update_bvh(self, device=None): ...
    def build_bvh(self, device=None) -> None: ...
    def bvh_id(self, device): ...
