import warp as wp
from .closest_point import project_on_box_at_origin as project_on_box_at_origin
from .element import Cube as Cube, Square as Square
from .geometry import Geometry as Geometry
from _typeshed import Incomplete
from warp.fem.cache import cached_arg_value as cached_arg_value, dynamic_func as dynamic_func
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, OUTSIDE as OUTSIDE, Sample as Sample, make_free_sample as make_free_sample

class Grid3DCellArg:
    res: wp.vec3i
    cell_size: wp.vec3
    origin: wp.vec3

class Grid3D(Geometry):
    dimension: int
    bounds_lo: Incomplete
    bounds_hi: Incomplete
    def __init__(self, res: wp.vec3i, bounds_lo: wp.vec3 | None = None, bounds_hi: wp.vec3 | None = None) -> None: ...
    @property
    def extents(self) -> wp.vec3: ...
    @property
    def cell_size(self) -> wp.vec3: ...
    def cell_count(self): ...
    def vertex_count(self): ...
    def side_count(self): ...
    def edge_count(self): ...
    def boundary_side_count(self): ...
    def reference_cell(self) -> Cube: ...
    def reference_side(self) -> Square: ...
    @property
    def res(self): ...
    @property
    def origin(self): ...
    @property
    def strides(self): ...
    CellArg = Grid3DCellArg
    Cell = wp.vec3i
    @wp.func
    def cell_index(res: wp.vec3i, cell: Cell): ...
    @wp.func
    def get_cell(res: wp.vec3i, cell_index: ElementIndex): ...
    class Side:
        axis: int
        origin: wp.vec3i
    class SideArg:
        cell_count: int
        axis_offsets: wp.vec3i
        cell_arg: Grid3DCellArg
    SideIndexArg = SideArg
    @wp.func
    def side_index(arg: SideArg, side: Side): ...
    @wp.func
    def get_side(arg: SideArg, side_index: ElementIndex): ...
    @cached_arg_value
    def cell_arg_value(self, device) -> CellArg: ...
    def fill_cell_arg(self, args: CellArg, device): ...
    @wp.func
    def cell_position(args: CellArg, s: Sample): ...
    @wp.func
    def cell_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_inverse_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_coordinates(args: Grid3DCellArg, cell_index: int, pos: wp.vec3): ...
    @wp.func
    def cell_closest_point(args: Grid3DCellArg, cell_index: int, pos: wp.vec3): ...
    def supports_cell_lookup(self, device): ...
    def make_filtered_cell_lookup(self, filter_func: wp.Function = None): ...
    @wp.func
    def cell_measure(args: CellArg, s: Sample): ...
    @wp.func
    def cell_normal(args: CellArg, s: Sample): ...
    @cached_arg_value
    def side_arg_value(self, device) -> SideArg: ...
    def fill_side_arg(self, args: SideArg, device): ...
    def side_index_arg_value(self, device) -> SideIndexArg: ...
    def fill_side_index_arg(self, args: SideIndexArg, device): ...
    @wp.func
    def boundary_side_index(args: SideArg, boundary_side_index: int): ...
    @wp.func
    def side_position(args: SideArg, s: Sample): ...
    @wp.func
    def side_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_outer_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure_ratio(args: SideArg, s: Sample): ...
    @wp.func
    def side_normal(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_outer_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_inner_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_outer_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_from_cell_coords(args: SideArg, side_index: ElementIndex, element_index: ElementIndex, element_coords: Coords): ...
    @wp.func
    def side_to_cell_arg(side_arg: SideArg): ...
    @wp.func
    def side_coordinates(args: SideArg, side_index: int, pos: wp.vec3): ...
    @wp.func
    def side_closest_point(args: SideArg, side_index: int, pos: wp.vec3): ...
