import warp as wp
from .element import Cube as Cube, Square as Square
from .geometry import Geometry as Geometry
from _typeshed import Incomplete
from warp.fem.cache import TemporaryStore as TemporaryStore, borrow_temporary as borrow_temporary, borrow_temporary_like as borrow_temporary_like, cached_arg_value as cached_arg_value
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, OUTSIDE as OUTSIDE, Sample as Sample

class HexmeshCellArg:
    hex_vertex_indices: None
    positions: None
    hex_bvh: wp.uint64

class HexmeshSideArg:
    cell_arg: HexmeshCellArg
    face_vertex_indices: None
    face_hex_indices: None
    face_hex_face_orientation: None

FACE_VERTEX_INDICES: Incomplete
EDGE_VERTEX_INDICES: Incomplete
FACE_ORIENTATION: Incomplete
FACE_TRANSLATION: Incomplete

class Hexmesh(Geometry):
    dimension: int
    hex_vertex_indices: Incomplete
    positions: Incomplete
    parallelepiped_cells: Incomplete
    cell_position: Incomplete
    cell_deformation_gradient: Incomplete
    cell_coordinates: Incomplete
    side_coordinates: Incomplete
    cell_closest_point: Incomplete
    side_closest_point: Incomplete
    def __init__(self, hex_vertex_indices: wp.array, positions: wp.array, assume_parallelepiped_cells: bool = False, build_bvh: bool = False, temporary_store: TemporaryStore | None = None) -> None: ...
    def cell_count(self): ...
    def vertex_count(self): ...
    def side_count(self): ...
    def edge_count(self): ...
    def boundary_side_count(self): ...
    def reference_cell(self) -> Cube: ...
    def reference_side(self) -> Square: ...
    @property
    def hex_edge_indices(self) -> wp.array: ...
    @property
    def face_hex_indices(self) -> wp.array: ...
    @property
    def face_vertex_indices(self) -> wp.array: ...
    CellArg = HexmeshCellArg
    SideArg = HexmeshSideArg
    class SideIndexArg:
        boundary_face_indices: None
    def cell_arg_value(self, device) -> CellArg: ...
    def fill_cell_arg(self, args: CellArg, device): ...
    @cached_arg_value
    def side_index_arg_value(self, device) -> SideIndexArg: ...
    def fill_side_index_arg(self, args: SideIndexArg, device): ...
    @wp.func
    def boundary_side_index(args: SideIndexArg, boundary_side_index: int): ...
    def side_arg_value(self, device) -> CellArg: ...
    def fill_side_arg(self, args: SideArg, device): ...
    @wp.func
    def side_position(args: SideArg, s: Sample): ...
    @wp.func
    def side_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_outer_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def face_to_hex_coords(local_face_index: int, face_orientation: int, side_coords: Coords): ...
    @wp.func
    def side_inner_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_outer_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_from_cell_coords(args: SideArg, side_index: ElementIndex, hex_index: ElementIndex, hex_coords: Coords): ...
    @wp.func
    def side_to_cell_arg(side_arg: SideArg): ...
    @wp.func
    def cell_bvh_id(cell_arg: HexmeshCellArg): ...
    @wp.func
    def cell_bounds(cell_arg: HexmeshCellArg, cell_index: ElementIndex): ...
