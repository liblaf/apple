import warp as wp
from .element import Cube as Cube, Square as Square
from .geometry import Geometry as Geometry
from _typeshed import Incomplete
from warp.fem import cache as cache, utils as utils
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, OUTSIDE as OUTSIDE, Sample as Sample, make_free_sample as make_free_sample

GRID_AXIS_FLAG: Incomplete
FACE_AXIS_MASK: Incomplete
FACE_INNER_OFFSET_BIT: Incomplete
FACE_OUTER_OFFSET_BIT: Incomplete

class NanogridCellArg:
    cell_grid: wp.uint64
    cell_ijk: None
    inverse_transform: wp.mat33
    cell_volume: float

class NanogridSideArg:
    cell_arg: NanogridCellArg
    face_ijk: None
    face_flags: None
    face_areas: wp.vec3

class Nanogrid(Geometry):
    dimension: int
    def __init__(self, grid: wp.Volume, temporary_store: cache.TemporaryStore | None = None) -> None: ...
    @property
    def cell_grid(self) -> wp.Volume: ...
    @property
    def vertex_grid(self) -> wp.Volume: ...
    @property
    def face_grid(self) -> wp.Volume: ...
    @property
    def edge_grid(self) -> wp.Volume: ...
    def cell_count(self): ...
    def vertex_count(self): ...
    def side_count(self): ...
    def boundary_side_count(self): ...
    def edge_count(self): ...
    def reference_cell(self) -> Cube: ...
    def reference_side(self) -> Square: ...
    CellArg = NanogridCellArg
    @cache.cached_arg_value
    def cell_arg_value(self, device) -> CellArg: ...
    def fill_cell_arg(self, arg, device) -> None: ...
    @wp.func
    def cell_position(args: CellArg, s: Sample): ...
    @wp.func
    def cell_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_inverse_deformation_gradient(args: CellArg, s: Sample): ...
    def supports_cell_lookup(self, device): ...
    @wp.func
    def cell_coordinates(args: NanogridCellArg, cell_index: int, pos: wp.vec3): ...
    @wp.func
    def cell_closest_point(args: NanogridCellArg, cell_index: int, pos: wp.vec3): ...
    def make_filtered_cell_lookup(self, filter_func): ...
    @wp.func
    def cell_measure(args: CellArg, s: Sample): ...
    @wp.func
    def cell_normal(args: CellArg, s: Sample): ...
    SideArg = NanogridSideArg
    @cache.cached_arg_value
    def side_arg_value(self, device) -> SideArg: ...
    def fill_side_arg(self, arg: SideArg, device): ...
    class SideIndexArg:
        boundary_face_indices: None
    @cache.cached_arg_value
    def side_index_arg_value(self, device) -> SideIndexArg: ...
    def fill_side_index_arg(self, arg: SideIndexArg, device): ...
    @wp.func
    def boundary_side_index(args: SideIndexArg, boundary_side_index: int): ...
    @wp.func
    def side_position(args: SideArg, s: Sample): ...
    @wp.func
    def side_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_outer_inverse_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure(args: SideArg, s: Sample): ...
    @wp.func
    def side_measure_ratio(args: SideArg, s: Sample): ...
    @wp.func
    def side_normal(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_cell_index(args: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_outer_cell_index(args: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_inner_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_outer_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_from_cell_coords(args: SideArg, side_index: ElementIndex, element_index: ElementIndex, element_coords: Coords): ...
    @wp.func
    def side_to_cell_arg(side_arg: SideArg): ...
    @wp.func
    def side_coordinates(args: SideArg, side_index: int, pos: wp.vec3): ...
    @wp.func
    def side_closest_point(args: SideArg, side_index: int, pos: wp.vec3): ...
