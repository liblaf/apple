import warp as wp
from .closest_point import project_on_tet_at_origin as project_on_tet_at_origin, project_on_tri_at_origin as project_on_tri_at_origin
from .element import Tetrahedron as Tetrahedron, Triangle as Triangle
from .geometry import Geometry as Geometry
from _typeshed import Incomplete
from warp.fem.cache import TemporaryStore as TemporaryStore, borrow_temporary as borrow_temporary, borrow_temporary_like as borrow_temporary_like, cached_arg_value as cached_arg_value
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, OUTSIDE as OUTSIDE, Sample as Sample

class TetmeshCellArg:
    tet_vertex_indices: None
    positions: None
    tet_bvh: wp.uint64

class TetmeshSideArg:
    cell_arg: TetmeshCellArg
    face_vertex_indices: None
    face_tet_indices: None

class Tetmesh(Geometry):
    dimension: int
    tet_vertex_indices: Incomplete
    positions: Incomplete
    cell_coordinates: Incomplete
    side_coordinates: Incomplete
    def __init__(self, tet_vertex_indices: wp.array, positions: wp.array, build_bvh: bool = False, temporary_store: TemporaryStore | None = None) -> None: ...
    def cell_count(self): ...
    def vertex_count(self): ...
    def side_count(self): ...
    def edge_count(self): ...
    def boundary_side_count(self): ...
    def reference_cell(self) -> Tetrahedron: ...
    def reference_side(self) -> Triangle: ...
    @property
    def tet_edge_indices(self) -> wp.array: ...
    @property
    def face_tet_indices(self) -> wp.array: ...
    @property
    def face_vertex_indices(self) -> wp.array: ...
    CellArg = TetmeshCellArg
    SideArg = TetmeshSideArg
    class SideIndexArg:
        boundary_face_indices: None
    def cell_arg_value(self, device) -> CellArg: ...
    def fill_cell_arg(self, args: CellArg, device): ...
    @wp.func
    def cell_position(args: CellArg, s: Sample): ...
    @wp.func
    def cell_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_inverse_deformation_gradient(args: CellArg, s: Sample): ...
    @wp.func
    def cell_closest_point(args: CellArg, tet_index: int, pos: wp.vec3): ...
    @cached_arg_value
    def side_index_arg_value(self, device) -> SideIndexArg: ...
    def fill_side_index_arg(self, args: SideIndexArg, device): ...
    @wp.func
    def boundary_side_index(args: SideIndexArg, boundary_side_index: int): ...
    def side_arg_value(self, device) -> CellArg: ...
    def fill_side_arg(self, args: SideArg, device): ...
    @wp.func
    def side_position(args: SideArg, s: Sample): ...
    @wp.func
    def side_closest_point(args: SideArg, tri_index: ElementIndex, pos: wp.vec3): ...
    @wp.func
    def side_deformation_gradient(args: SideArg, s: Sample): ...
    @wp.func
    def side_inner_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def side_outer_cell_index(arg: SideArg, side_index: ElementIndex): ...
    @wp.func
    def face_to_tet_coords(args: SideArg, side_index: ElementIndex, tet_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_inner_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_outer_cell_coords(args: SideArg, side_index: ElementIndex, side_coords: Coords): ...
    @wp.func
    def side_from_cell_coords(args: SideArg, side_index: ElementIndex, tet_index: ElementIndex, tet_coords: Coords): ...
    @wp.func
    def side_to_cell_arg(side_arg: SideArg): ...
    @wp.func
    def cell_bvh_id(cell_arg: TetmeshCellArg): ...
    @wp.func
    def cell_bounds(cell_arg: TetmeshCellArg, cell_index: ElementIndex): ...
