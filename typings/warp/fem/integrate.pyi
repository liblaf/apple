import ast
import warp as wp
from typing import Any, Callable, NamedTuple
from warp.codegen import get_annotations as get_annotations
from warp.fem import cache as cache
from warp.fem.domain import GeometryDomain as GeometryDomain
from warp.fem.field import DiscreteField as DiscreteField, FieldLike as FieldLike, FieldRestriction as FieldRestriction, GeometryField as GeometryField, LocalTestField as LocalTestField, LocalTrialField as LocalTrialField, TestField as TestField, TrialField as TrialField, make_restriction as make_restriction
from warp.fem.field.virtual import make_bilinear_dispatch_kernel as make_bilinear_dispatch_kernel, make_linear_dispatch_kernel as make_linear_dispatch_kernel
from warp.fem.linalg import array_axpy as array_axpy, basis_coefficient as basis_coefficient
from warp.fem.operator import Integrand as Integrand, Operator as Operator, integrand as integrand
from warp.fem.quadrature import Quadrature as Quadrature, RegularQuadrature as RegularQuadrature
from warp.fem.types import Coords as Coords, DofIndex as DofIndex, Domain as Domain, Field as Field, NULL_DOF_INDEX as NULL_DOF_INDEX, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, NULL_NODE_INDEX as NULL_NODE_INDEX, OUTSIDE as OUTSIDE, Sample as Sample, make_free_sample as make_free_sample
from warp.fem.utils import type_zero_element as type_zero_element
from warp.sparse import BsrMatrix as BsrMatrix, bsr_set_from_triplets as bsr_set_from_triplets, bsr_zeros as bsr_zeros
from warp.types import type_size as type_size
from warp.utils import array_cast as array_cast

class IntegrandVisitor(ast.NodeTransformer):
    class FieldInfo(NamedTuple):
        field: FieldLike
        abstract_type: type
        concrete_type: type
        root_arg_name: type
    def __init__(self, integrand: Integrand, field_info: dict[str, FieldInfo]) -> None: ...
    def visit_Call(self, call: ast.Call): ...
    def visit_Assign(self, node: ast.Assign): ...

class IntegrandOperatorParser(IntegrandVisitor):
    def __init__(self, integrand: Integrand, field_info: dict[str, IntegrandVisitor.FieldInfo], callback: Callable) -> None: ...
    @staticmethod
    def apply(integrand: Integrand, field_args: dict[str, FieldLike], operator_callback: Callable | None = None) -> wp.Function: ...

class IntegrandTransformer(IntegrandVisitor):
    @staticmethod
    def apply(integrand: Integrand, field_args: dict[str, FieldLike]) -> wp.Function: ...

class IntegrandArguments(NamedTuple):
    field_args: dict[str, FieldLike | GeometryDomain]
    value_args: dict[str, Any]
    domain_name: str
    sample_name: str
    test_name: str
    trial_name: str

class PassFieldArgsToIntegrand(ast.NodeTransformer):
    def __init__(self, arg_names: list[str], parsed_args: IntegrandArguments, integrand_func: wp.Function, func_name: str = 'integrand_func', fields_var_name: str = 'fields', values_var_name: str = 'values', domain_var_name: str = 'domain_arg', domain_index_var_name: str = 'domain_index_arg', sample_var_name: str = 'sample', field_wrappers_attr: str = '_field_wrappers') -> None: ...
    class _FieldWrappers: ...
    def visit_Call(self, call: ast.Call): ...

def get_integrate_constant_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, accumulate_dtype): ...
def get_integrate_linear_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: TestField, output_dtype, accumulate_dtype): ...
def get_integrate_linear_nodal_kernel(integrand_func: wp.Function, domain: GeometryDomain, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: TestField, output_dtype, accumulate_dtype): ...
def get_integrate_linear_local_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: LocalTestField): ...
def get_integrate_bilinear_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: TestField, trial: TrialField, output_dtype, accumulate_dtype): ...
def get_integrate_bilinear_nodal_kernel(integrand_func: wp.Function, domain: GeometryDomain, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: TestField, output_dtype, accumulate_dtype): ...
def get_integrate_bilinear_local_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, test: LocalTestField, trial: LocalTrialField): ...
def integrate(integrand: Integrand, domain: GeometryDomain | None = None, quadrature: Quadrature | None = None, nodal: bool | None = None, fields: dict[str, FieldLike] | None = None, values: dict[str, Any] | None = None, accumulate_dtype: type = ..., output_dtype: type | None = None, output: BsrMatrix | wp.array | None = None, device=None, temporary_store: cache.TemporaryStore | None = None, kernel_options: dict[str, Any] | None = None, assembly: str | None = None, add: bool = False, bsr_options: dict[str, Any] | None = None): ...
def get_interpolate_to_field_function(integrand_func: wp.Function, domain: GeometryDomain, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, dest: FieldRestriction): ...
def get_interpolate_to_field_kernel(interpolate_to_field_fn: wp.Function, domain: GeometryDomain, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, dest: FieldRestriction): ...
def get_interpolate_at_quadrature_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, value_type: type): ...
def get_interpolate_jacobian_at_quadrature_kernel(integrand_func: wp.Function, domain: GeometryDomain, quadrature: Quadrature, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, trial: TrialField, value_size: int, value_type: type): ...
def get_interpolate_free_kernel(integrand_func: wp.Function, domain: GeometryDomain, FieldStruct: wp.codegen.Struct, ValueStruct: wp.codegen.Struct, value_type: type): ...
def interpolate(integrand: Integrand | FieldLike, dest: DiscreteField | FieldRestriction | wp.array | None = None, quadrature: Quadrature | None = None, dim: int | None = None, domain: Domain | None = None, fields: dict[str, FieldLike] | None = None, values: dict[str, Any] | None = None, device=None, kernel_options: dict[str, Any] | None = None, temporary_store: cache.TemporaryStore | None = None, bsr_options: dict[str, Any] | None = None): ...
