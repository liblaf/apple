import warp as wp
from .quadrature import Quadrature as Quadrature
from typing import Any
from warp.fem.cache import TemporaryStore as TemporaryStore, borrow_temporary as borrow_temporary, cached_arg_value as cached_arg_value, dynamic_kernel as dynamic_kernel
from warp.fem.domain import GeometryDomain as GeometryDomain
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, OUTSIDE as OUTSIDE, make_free_sample as make_free_sample
from warp.fem.utils import compress_node_indices as compress_node_indices

class PicQuadrature(Quadrature):
    def __init__(self, domain: GeometryDomain, positions: 'wp.array(dtype=wp.vecXd)' | tuple['wp.array(dtype=ElementIndex)', 'wp.array(dtype=Coords)'], measures: 'wp.array(dtype=float)' | None = None, requires_grad: bool = False, max_dist: float = 0.0, temporary_store: TemporaryStore = None) -> None: ...
    @property
    def name(self): ...
    @Quadrature.domain.setter
    def domain(self, domain: GeometryDomain): ...
    class Arg:
        cell_particle_offsets: None
        cell_particle_indices: None
        particle_fraction: None
        particle_coords: None
    @cached_arg_value
    def arg_value(self, device) -> Arg: ...
    def fill_arg(self, args: Arg, device): ...
    def total_point_count(self): ...
    def active_cell_count(self): ...
    def max_points_per_element(self): ...
    @wp.func
    def point_count(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex): ...
    @wp.func
    def point_coords(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex, index: int): ...
    @wp.func
    def point_weight(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex, index: int): ...
    @wp.func
    def point_index(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex, index: int): ...
    @wp.func
    def point_evaluation_index(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex, index: int): ...
    def fill_element_mask(self, mask: 'wp.array(dtype=int)'): ...
