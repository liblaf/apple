import warp as wp
from ..polynomial import Polynomial as Polynomial
from _typeshed import Incomplete
from typing import Any
from warp.fem import cache as cache
from warp.fem.domain import GeometryDomain as GeometryDomain
from warp.fem.geometry import Element as Element
from warp.fem.space import FunctionSpace as FunctionSpace
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, QuadraturePointIndex as QuadraturePointIndex

class QuadraturePointElementIndex:
    domain_element_index: ElementIndex
    qp_index_in_element: int

class Quadrature:
    class Arg: ...
    def __init__(self, domain: GeometryDomain) -> None: ...
    @property
    def domain(self): ...
    def arg_value(self, device) -> Arg: ...
    def fill_arg(self, arg: Arg, device): ...
    def total_point_count(self) -> None: ...
    def evaluation_point_count(self): ...
    def max_points_per_element(self) -> None: ...
    @staticmethod
    def point_count(elt_arg: GeometryDomain.ElementArg, qp_arg: Arg, domain_element_index: ElementIndex, geo_element_index: ElementIndex): ...
    @staticmethod
    def point_coords(elt_arg: GeometryDomain.ElementArg, qp_arg: Arg, domain_element_index: ElementIndex, geo_element_index: ElementIndex, element_qp_index: int): ...
    @staticmethod
    def point_weight(elt_arg: GeometryDomain.ElementArg, qp_arg: Arg, domain_element_index: ElementIndex, geo_element_index: ElementIndex, element_qp_index: int): ...
    @staticmethod
    def point_index(elt_arg: GeometryDomain.ElementArg, qp_arg: Arg, domain_element_index: ElementIndex, geo_element_index: ElementIndex, element_qp_index: int): ...
    @staticmethod
    def point_evaluation_index(elt_arg: GeometryDomain.ElementArg, qp_arg: Arg, domain_element_index: ElementIndex, geo_element_index: ElementIndex, element_qp_index: int): ...
    ElementIndexArg: Incomplete
    @cache.cached_arg_value
    def element_index_arg_value(self, device): ...
    @wp.func
    def evaluation_point_element_index(element_index_arg: None, qp_eval_index: QuadraturePointIndex): ...

class _QuadratureWithRegularEvaluationPoints(Quadrature):
    def __init__(self, domain: GeometryDomain, N: int) -> None: ...
    ElementIndexArg = Quadrature.Arg
    element_index_arg_value: Incomplete
    def evaluation_point_count(self): ...

class RegularQuadrature(_QuadratureWithRegularEvaluationPoints):
    class Arg:
        points: None
        weights: None
    class CachedFormula:
        count: Incomplete
        def __init__(self, element: Element, order: int, family: Polynomial) -> None: ...
        @cache.cached_arg_value
        def arg_value(self, device): ...
        def fill_arg(self, arg: RegularQuadrature.Arg, device): ...
        @staticmethod
        def get(element: Element, order: int, family: Polynomial): ...
    family: Incomplete
    order: Incomplete
    def __init__(self, domain: GeometryDomain, order: int, family: Polynomial = None) -> None: ...
    @property
    def name(self): ...
    def total_point_count(self): ...
    def max_points_per_element(self): ...
    @property
    def points(self): ...
    @property
    def weights(self): ...
    def arg_value(self, device): ...
    def fill_arg(self, arg: RegularQuadrature.Arg, device): ...

class NodalQuadrature(Quadrature):
    Arg: Incomplete
    point_count: Incomplete
    point_index: Incomplete
    point_coords: Incomplete
    point_weight: Incomplete
    point_evaluation_index: Incomplete
    def __init__(self, domain: GeometryDomain | None, space: FunctionSpace) -> None: ...
    @property
    def name(self): ...
    def total_point_count(self): ...
    def max_points_per_element(self): ...
    @cache.cached_arg_value
    def arg_value(self, device): ...
    def fill_arg(self, arg: NodalQuadrature.Arg, device): ...
    def evaluation_point_count(self): ...

class ExplicitQuadrature(_QuadratureWithRegularEvaluationPoints):
    class Arg:
        points_per_cell: int
        points: None
        weights: None
    point_index: Incomplete
    point_coords: Incomplete
    point_weight: Incomplete
    def __init__(self, domain: GeometryDomain, points: 'wp.array2d(dtype=Coords)', weights: 'wp.array2d(dtype=float)') -> None: ...
    @property
    def name(self): ...
    def total_point_count(self): ...
    def max_points_per_element(self): ...
    def arg_value(self, device): ...
    def fill_arg(self, arg: ExplicitQuadrature.Arg, device): ...
    @wp.func
    def point_count(elt_arg: Any, qp_arg: Arg, domain_element_index: ElementIndex, element_index: ElementIndex): ...
