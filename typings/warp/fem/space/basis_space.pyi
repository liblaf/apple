import warp as wp
from .shape import ShapeFunction as ShapeFunction
from .topology import RegularDiscontinuousSpaceTopology as RegularDiscontinuousSpaceTopology, SpaceTopology as SpaceTopology
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.geometry import Geometry as Geometry
from warp.fem.quadrature import Quadrature as Quadrature
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, NULL_QP_INDEX as NULL_QP_INDEX, QuadraturePointIndex as QuadraturePointIndex, make_free_sample as make_free_sample

class BasisSpace:
    class BasisArg: ...
    def __init__(self, topology: SpaceTopology) -> None: ...
    @property
    def topology(self) -> SpaceTopology: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def value(self) -> ShapeFunction.Value: ...
    def basis_arg_value(self, device) -> BasisArg: ...
    def fill_basis_arg(self, arg, device) -> None: ...
    def node_positions(self, out: wp.array | None = None) -> wp.array: ...
    def make_node_coords_in_element(self) -> None: ...
    def make_node_quadrature_weight(self) -> None: ...
    def make_element_inner_weight(self) -> None: ...
    def make_element_outer_weight(self): ...
    def make_element_inner_weight_gradient(self) -> None: ...
    def make_element_outer_weight_gradient(self): ...
    def make_trace_node_quadrature_weight(self) -> None: ...
    def trace(self) -> TraceBasisSpace: ...
    @property
    def weight_type(self): ...
    @property
    def weight_gradient_type(self): ...

class ShapeBasisSpace(BasisSpace):
    BasisArg: Incomplete
    basis_arg_value: Incomplete
    fill_basis_arg: Incomplete
    ORDER: Incomplete
    node_triangulation: Incomplete
    node_tets: Incomplete
    node_hexes: Incomplete
    vtk_cells: Incomplete
    node_grid: Incomplete
    def __init__(self, topology: SpaceTopology, shape: ShapeFunction) -> None: ...
    @property
    def shape(self) -> ShapeFunction: ...
    @property
    def value(self) -> ShapeFunction.Value: ...
    @property
    def name(self): ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def make_trace_node_quadrature_weight(self, trace_basis): ...

class TraceBasisSpace(BasisSpace):
    ORDER: Incomplete
    BasisArg: Incomplete
    basis_arg_value: Incomplete
    fill_basis_arg: Incomplete
    def __init__(self, basis: BasisSpace) -> None: ...
    @property
    def name(self): ...
    @property
    def value(self) -> ShapeFunction.Value: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_outer_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def make_element_outer_weight_gradient(self): ...
    def __eq__(self, other: TraceBasisSpace) -> bool: ...

class PiecewiseConstantBasisSpace(ShapeBasisSpace):
    class Trace(TraceBasisSpace):
        def make_node_coords_in_element(self): ...
    def trace(self): ...

def make_discontinuous_basis_space(geometry: Geometry, shape: ShapeFunction): ...

class UnstructuredPointTopology(SpaceTopology):
    TopologyArg: Incomplete
    fill_topo_arg: Incomplete
    def __init__(self, quadrature: Quadrature) -> None: ...
    def node_count(self): ...
    @property
    def name(self): ...
    def topo_arg_value(self, device) -> SpaceTopology.TopologyArg: ...

class PointBasisSpace(BasisSpace):
    BasisArg: Incomplete
    basis_arg_value: Incomplete
    fill_basis_arg: Incomplete
    ORDER: int
    make_element_outer_weight: Incomplete
    make_element_outer_weight_gradient: Incomplete
    def __init__(self, quadrature: Quadrature) -> None: ...
    @property
    def name(self): ...
    @property
    def value(self) -> ShapeFunction.Value: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def make_trace_node_quadrature_weight(self, trace_basis): ...
