import warp as wp
from .topology import SpaceTopology as SpaceTopology
from _typeshed import Incomplete
from typing import Any
from warp.fem import cache as cache
from warp.fem.geometry import Geometry as Geometry
from warp.fem.types import Coords as Coords, ElementIndex as ElementIndex, ElementKind as ElementKind, Sample as Sample, make_free_sample as make_free_sample

class FunctionSpace:
    dtype: type
    dof_dtype: type
    SpaceArg: wp.codegen.Struct
    LocalValueMap: type
    VALUE_DOF_COUNT: int
    NODE_DOF_COUNT: int
    ORDER: int
    ElementArg: Incomplete
    element_inner_reference_gradient_transform: Incomplete
    element_outer_reference_gradient_transform: Incomplete
    def __init__(self, topology: SpaceTopology) -> None: ...
    def node_count(self) -> int: ...
    def space_arg_value(self, device) -> wp.codegen.StructInstance: ...
    @property
    def topology(self) -> SpaceTopology: ...
    @property
    def geometry(self) -> Geometry: ...
    @property
    def element_kind(self) -> ElementKind: ...
    @property
    def dimension(self) -> int: ...
    @property
    def degree(self) -> int: ...
    @property
    def name(self) -> None: ...
    def trace(self) -> FunctionSpace: ...
    def make_field(self, space_partition=None) -> None: ...
    def gradient_valid(self) -> bool: ...
    def divergence_valid(self) -> bool: ...
    @staticmethod
    def node_basis_element(dof_coord: int): ...
    @staticmethod
    def value_basis_element(dof_coord: int): ...
    @staticmethod
    def local_value_map_inner(elt_arg: SpaceTopology.ElementArg, element_index: ElementIndex, coords: Coords): ...
    @staticmethod
    def local_value_map_outer(elt_arg: SpaceTopology.ElementArg, element_index: ElementIndex, coords: Coords): ...
    @staticmethod
    def node_coords_in_element(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, node_index_in_elt: int): ...
    @staticmethod
    def node_quadrature_weight(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, node_index_in_elt: int): ...
    @staticmethod
    def element_inner_weight(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, coords: Coords, node_index_in_elt: int): ...
    @staticmethod
    def element_inner_weight_gradient(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, coords: Coords, node_index_in_elt: int): ...
    @staticmethod
    def element_outer_weight(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, coords: Coords, node_index_in_elt: int): ...
    @staticmethod
    def element_outer_weight_gradient(elt_arg: SpaceTopology.ElementArg, space_arg: SpaceArg, element_index: ElementIndex, coords: Coords, node_index_in_elt: int): ...
    def space_value(dof_value: FunctionSpace.dof_dtype, node_weight: Any, local_value_map: FunctionSpace.LocalValueMap): ...
    def space_gradient(dof_value: FunctionSpace.dof_dtype, node_weight: Any, local_value_map: FunctionSpace.LocalValueMap, grad_transform: Any): ...
    def space_divergence(dof_value: FunctionSpace.dof_dtype, node_weight: Any, local_value_map: FunctionSpace.LocalValueMap, grad_transform: Any): ...
    @staticmethod
    def node_dof_value(elt_arg: FunctionSpace.ElementArg, space_arg: FunctionSpace.SpaceArg, element_index: ElementIndex, node_index_in_elt: int, space_value: FunctionSpace.dtype): ...
