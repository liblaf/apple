from .shape import SquareBipolynomialShapeFunctions as SquareBipolynomialShapeFunctions, SquareShapeFunction as SquareShapeFunction
from .topology import SpaceTopology as SpaceTopology, forward_base_topology as forward_base_topology
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.geometry import Grid2D as Grid2D
from warp.fem.polynomial import is_closed as is_closed
from warp.fem.types import ElementIndex as ElementIndex, NULL_NODE_INDEX as NULL_NODE_INDEX

class Grid2DSpaceTopology(SpaceTopology):
    element_node_index: Incomplete
    def __init__(self, grid: Grid2D, shape: SquareShapeFunction) -> None: ...
    TopologyArg = Grid2D.SideArg
    @property
    def name(self): ...
    def topo_arg_value(self, device): ...
    def fill_topo_arg(self, arg: Grid2D.SideArg, device): ...
    def node_count(self) -> int: ...

class GridBipolynomialSpaceTopology(SpaceTopology):
    element_node_index: Incomplete
    def __init__(self, grid: Grid2D, shape: SquareBipolynomialShapeFunctions) -> None: ...
    def node_count(self) -> int: ...
    def node_grid(self): ...

def make_grid_2d_space_topology(grid: Grid2D, shape: SquareShapeFunction): ...
