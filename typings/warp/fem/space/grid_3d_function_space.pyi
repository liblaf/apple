from .shape import CubeShapeFunction as CubeShapeFunction, CubeTripolynomialShapeFunctions as CubeTripolynomialShapeFunctions
from .topology import SpaceTopology as SpaceTopology, forward_base_topology as forward_base_topology
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.geometry import Grid3D as Grid3D
from warp.fem.polynomial import is_closed as is_closed
from warp.fem.types import ElementIndex as ElementIndex

class Grid3DSpaceTopology(SpaceTopology):
    element_node_index: Incomplete
    def __init__(self, grid: Grid3D, shape: CubeShapeFunction) -> None: ...
    @property
    def name(self): ...
    def node_count(self) -> int: ...

class GridTripolynomialSpaceTopology(SpaceTopology):
    element_node_index: Incomplete
    def __init__(self, grid: Grid3D, shape: CubeTripolynomialShapeFunctions) -> None: ...
    def node_count(self) -> int: ...
    def node_grid(self): ...

def make_grid_3d_space_topology(grid: Grid3D, shape: CubeShapeFunction): ...
