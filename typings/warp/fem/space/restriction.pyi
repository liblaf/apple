import warp as wp
from .partition import SpacePartition as SpacePartition
from _typeshed import Incomplete
from warp.fem.cache import TemporaryStore as TemporaryStore, borrow_temporary as borrow_temporary, borrow_temporary_like as borrow_temporary_like, cached_arg_value as cached_arg_value
from warp.fem.domain import GeometryDomain as GeometryDomain
from warp.fem.types import NULL_NODE_INDEX as NULL_NODE_INDEX, NodeElementIndex as NodeElementIndex
from warp.fem.utils import compress_node_indices as compress_node_indices

class SpaceRestriction:
    space_partition: Incomplete
    space_topology: Incomplete
    domain: Incomplete
    def __init__(self, space_partition: SpacePartition, domain: GeometryDomain, device=None, temporary_store: TemporaryStore = None) -> None: ...
    def node_count(self): ...
    def partition_element_offsets(self): ...
    def node_partition_indices(self): ...
    def total_node_element_count(self): ...
    class NodeArg:
        dof_element_offsets: None
        dof_element_indices: None
        dof_partition_indices: None
        dof_indices_in_element: None
    @cached_arg_value
    def node_arg_value(self, device): ...
    def fill_node_arg(self, arg: NodeArg, device): ...
    @wp.func
    def node_partition_index(args: NodeArg, restriction_node_index: int): ...
    @wp.func
    def node_element_range(args: NodeArg, partition_node_index: int): ...
    @wp.func
    def node_element_index(args: NodeArg, node_element_offset: int): ...
