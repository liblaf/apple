from .shape_function import ShapeFunction as ShapeFunction
from .tet_shape_function import TetrahedronPolynomialShapeFunctions as TetrahedronPolynomialShapeFunctions
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.geometry import Grid3D as Grid3D
from warp.fem.polynomial import Polynomial as Polynomial, is_closed as is_closed, lagrange_scales as lagrange_scales, quadrature_1d as quadrature_1d
from warp.fem.types import Coords as Coords

class CubeShapeFunction(ShapeFunction):
    VERTEX: int
    EDGE: int
    FACE: int
    INTERIOR: int

class CubeTripolynomialShapeFunctions(CubeShapeFunction):
    family: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    LOBATTO_COORDS: Incomplete
    LOBATTO_WEIGHT: Incomplete
    LAGRANGE_SCALE: Incomplete
    ORDER_PLUS_ONE: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int, family: Polynomial) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_node_hexes(self): ...
    def element_node_tets(self): ...
    def element_vtk_cells(self): ...

class CubeSerendipityShapeFunctions(CubeShapeFunction):
    family: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    LOBATTO_COORDS: Incomplete
    LOBATTO_WEIGHT: Incomplete
    LAGRANGE_SCALE: Incomplete
    ORDER_PLUS_ONE: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int, family: Polynomial) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_node_tets(self): ...
    def element_vtk_cells(self): ...

class CubeNonConformingPolynomialShapeFunctions(ShapeFunction):
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    element_node_tets: Incomplete
    element_vtk_cells: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class CubeNedelecFirstKindShapeFunctions(CubeShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class CubeRaviartThomasShapeFunctions(CubeShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
