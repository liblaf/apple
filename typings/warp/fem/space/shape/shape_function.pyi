from _typeshed import Incomplete
from enum import Enum
from warp.fem import cache as cache
from warp.fem.geometry import Element as Element
from warp.fem.types import Coords as Coords

class ShapeFunction:
    ORDER: int
    NODES_PER_ELEMENT: int
    class Value(Enum):
        Scalar = 0
        CovariantVector = 1
        ContravariantVector = 2
    value: Value
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self) -> None: ...
    def make_node_quadrature_weight(self) -> None: ...
    def make_trace_node_quadrature_weight(self) -> None: ...
    def make_element_inner_weight(self) -> None: ...
    def make_element_inner_weight_gradient(self) -> None: ...

class ConstantShapeFunction(ShapeFunction):
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    COORDS: Incomplete
    def __init__(self, element: Element, space_dimension: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_vtk_cells(self): ...
