from .shape_function import ShapeFunction as ShapeFunction
from .triangle_shape_function import TrianglePolynomialShapeFunctions as TrianglePolynomialShapeFunctions
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.polynomial import Polynomial as Polynomial, is_closed as is_closed, lagrange_scales as lagrange_scales, quadrature_1d as quadrature_1d
from warp.fem.types import Coords as Coords

class SquareShapeFunction(ShapeFunction):
    VERTEX: int
    EDGE_X: int
    EDGE_Y: int
    INTERIOR: int
    VERTEX_NODE_COUNT: int
    EDGE_NODE_COUNT: int
    INTERIOR_NODE_COUNT: int

class SquareBipolynomialShapeFunctions(SquareShapeFunction):
    family: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    LOBATTO_COORDS: Incomplete
    LOBATTO_WEIGHT: Incomplete
    LAGRANGE_SCALE: Incomplete
    ORDER_PLUS_ONE: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int, family: Polynomial) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_node_triangulation(self): ...
    def element_vtk_cells(self): ...

class SquareSerendipityShapeFunctions(SquareShapeFunction):
    family: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    LOBATTO_COORDS: Incomplete
    LOBATTO_WEIGHT: Incomplete
    LAGRANGE_SCALE: Incomplete
    ORDER_PLUS_ONE: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int, family: Polynomial) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_node_triangulation(self): ...
    def element_vtk_cells(self): ...

class SquareNonConformingPolynomialShapeFunctions(ShapeFunction):
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    element_node_triangulation: Incomplete
    element_vtk_cells: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class SquareNedelecFirstKindShapeFunctions(SquareShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class SquareRaviartThomasShapeFunctions(SquareShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
