import warp as wp
from .shape_function import ShapeFunction as ShapeFunction
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.types import Coords as Coords

class TetrahedronShapeFunction(ShapeFunction):
    VERTEX: Incomplete
    EDGE: Incomplete
    FACE: Incomplete
    INTERIOR: Incomplete
    VERTEX_NODE_COUNT: int
    EDGE_NODE_COUNT: int
    FACE_NODE_COUNT: int
    INTERIOR_NODE_COUNT: int
    @staticmethod
    def node_type_and_index(node_index_in_elt: int): ...
    @wp.func
    def edge_vidx(edge: int): ...
    @wp.func
    def opposite_edge_vidx(edge: int): ...

class TetrahedronPolynomialShapeFunctions(TetrahedronShapeFunction):
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    SIDE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INERIOR_NODE_COUNT: Incomplete
    NODE_TET_COORDS: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
    def element_node_tets(self): ...
    def element_vtk_cells(self): ...

class TetrahedronNonConformingPolynomialShapeFunctions(ShapeFunction):
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    element_node_tets: Incomplete
    element_vtk_cells: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class TetrahedronNedelecFirstKindShapeFunctions(TetrahedronShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...

class TetrahedronRaviartThomasShapeFunctions(TetrahedronShapeFunction):
    value: Incomplete
    ORDER: Incomplete
    NODES_PER_ELEMENT: Incomplete
    NODES_PER_SIDE: Incomplete
    VERTEX_NODE_COUNT: Incomplete
    EDGE_NODE_COUNT: Incomplete
    FACE_NODE_COUNT: Incomplete
    INTERIOR_NODE_COUNT: Incomplete
    node_type_and_type_index: Incomplete
    def __init__(self, degree: int) -> None: ...
    @property
    def name(self) -> str: ...
    def make_node_coords_in_element(self): ...
    def make_node_quadrature_weight(self): ...
    def make_trace_node_quadrature_weight(self): ...
    def make_element_inner_weight(self): ...
    def make_element_inner_weight_gradient(self): ...
