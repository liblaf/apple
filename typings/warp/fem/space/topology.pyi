import warp as wp
from _typeshed import Incomplete
from warp.fem import cache as cache
from warp.fem.geometry import DeformedGeometry as DeformedGeometry, Geometry as Geometry
from warp.fem.types import ElementIndex as ElementIndex, NULL_ELEMENT_INDEX as NULL_ELEMENT_INDEX, NULL_NODE_INDEX as NULL_NODE_INDEX

class SpaceTopology:
    dimension: int
    MAX_NODES_PER_ELEMENT: int
    class TopologyArg: ...
    ElementArg: Incomplete
    def __init__(self, geometry: Geometry, max_nodes_per_element: int) -> None: ...
    @property
    def geometry(self) -> Geometry: ...
    def node_count(self) -> int: ...
    def topo_arg_value(self, device) -> TopologyArg: ...
    def fill_topo_arg(self, arg, device) -> None: ...
    @property
    def name(self): ...
    @staticmethod
    def element_node_count(geo_arg: ElementArg, topo_arg: TopologyArg, element_index: ElementIndex) -> int: ...
    @staticmethod
    def element_node_index(geo_arg: ElementArg, topo_arg: TopologyArg, element_index: ElementIndex, node_index_in_elt: int) -> int: ...
    @staticmethod
    def side_neighbor_node_counts(side_arg: ElementArg, side_index: ElementIndex) -> tuple[int, int]: ...
    def element_node_indices(self, out: wp.array | None = None) -> wp.array: ...
    def trace(self) -> TraceSpaceTopology: ...
    @property
    def is_trace(self) -> bool: ...
    def full_space_topology(self) -> SpaceTopology: ...
    def __eq__(self, other: SpaceTopology) -> bool: ...
    def is_derived_from(self, other: SpaceTopology) -> bool: ...

class TraceSpaceTopology(SpaceTopology):
    dimension: Incomplete
    ElementArg: Incomplete
    TopologyArg: Incomplete
    topo_arg_value: Incomplete
    fill_topo_arg: Incomplete
    side_neighbor_node_counts: Incomplete
    def __init__(self, topo: SpaceTopology) -> None: ...
    def node_count(self) -> int: ...
    @property
    def name(self): ...
    def full_space_topology(self) -> SpaceTopology: ...
    def __eq__(self, other: TraceSpaceTopology) -> bool: ...

class RegularDiscontinuousSpaceTopologyMixin:
    element_node_index: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def node_count(self): ...
    @property
    def name(self): ...

class RegularDiscontinuousSpaceTopology(RegularDiscontinuousSpaceTopologyMixin, SpaceTopology): ...

class DeformedGeometrySpaceTopology(SpaceTopology):
    base: Incomplete
    node_count: Incomplete
    topo_arg_value: Incomplete
    fill_topo_arg: Incomplete
    TopologyArg: Incomplete
    def __init__(self, geometry: DeformedGeometry, base_topology: SpaceTopology) -> None: ...
    @property
    def name(self): ...

def forward_base_topology(topology_class: type[SpaceTopology], geometry: Geometry, *args, **kwargs) -> SpaceTopology: ...
