import warp as wp
from typing import Callable
from warp.utils import array_inner as array_inner

class LinearOperator:
    def __init__(self, shape: tuple[int, int], dtype: type, device: wp.context.Device, matvec: Callable) -> None: ...
    @property
    def shape(self) -> tuple[int, int]: ...
    @property
    def dtype(self) -> type: ...
    @property
    def device(self) -> wp.context.Device: ...
    @property
    def matvec(self) -> Callable: ...
    @property
    def scalar_type(self): ...

def aslinearoperator(A: _Matrix) -> LinearOperator: ...
def preconditioner(A: _Matrix, ptype: str = 'diag') -> LinearOperator: ...
def cg(A: _Matrix, b: wp.array, x: wp.array, tol: float | None = None, atol: float | None = None, maxiter: float | None = 0, M: _Matrix | None = None, callback: Callable | None = None, check_every: int = 10, use_cuda_graph: bool = True) -> tuple[int, float, float]: ...
def cr(A: _Matrix, b: wp.array, x: wp.array, tol: float | None = None, atol: float | None = None, maxiter: float | None = 0, M: _Matrix | None = None, callback: Callable | None = None, check_every: int = 10, use_cuda_graph: bool = True) -> tuple[int, float, float]: ...
def bicgstab(A: _Matrix, b: wp.array, x: wp.array, tol: float | None = None, atol: float | None = None, maxiter: float | None = 0, M: _Matrix | None = None, callback: Callable | None = None, check_every: int = 10, use_cuda_graph: bool = True, is_left_preconditioner: bool = False): ...
def gmres(A: _Matrix, b: wp.array, x: wp.array, tol: float | None = None, atol: float | None = None, restart: int = 31, maxiter: float | None = 0, M: _Matrix | None = None, callback: Callable | None = None, check_every: int = 31, use_cuda_graph: bool = True, is_left_preconditioner: bool = False): ...
