import paddle
import warp
import warp.context
from paddle.base.libpaddle import CPUPlace, CUDAPinnedPlace, CUDAPlace, Place

def device_from_paddle(paddle_device: Place | CPUPlace | CUDAPinnedPlace | CUDAPlace | str) -> warp.context.Device: ...
def device_to_paddle(warp_device: warp.context.Devicelike) -> str: ...
def dtype_to_paddle(warp_dtype): ...
def dtype_from_paddle(paddle_dtype): ...
def dtype_is_compatible(paddle_dtype: paddle.dtype, warp_dtype) -> bool: ...
def from_paddle(t: paddle.Tensor, dtype: paddle.dtype | None = None, requires_grad: bool | None = None, grad: paddle.Tensor | None = None, return_ctype: bool = False) -> warp.array: ...
def to_paddle(a: warp.array, requires_grad: bool | None = None) -> paddle.Tensor: ...
def stream_from_paddle(stream_or_device=None): ...
