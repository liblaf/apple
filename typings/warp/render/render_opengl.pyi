import numpy as np
import types
import warp as wp
from .utils import tab10_color_map as tab10_color_map
from _typeshed import Incomplete

Mat44 = list[float] | list[list[float]] | np.ndarray
shape_vertex_shader: str
shape_fragment_shader: str
grid_vertex_shader: str
grid_fragment_shader: str
sky_vertex_shader: str
sky_fragment_shader: str
frame_vertex_shader: str
frame_fragment_shader: str
frame_depth_fragment_shader: str

@wp.kernel
def update_vbo_transforms(instance_id: None, instance_body: None, instance_transforms: None, instance_scalings: None, body_q: None, vbo_transforms: None): ...
@wp.kernel
def update_vbo_vertices(points: None, scale: wp.vec3, vbo_vertices: None): ...
@wp.kernel
def update_points_positions(instance_positions: None, instance_scalings: None, vbo_transforms: None): ...
@wp.kernel
def update_line_transforms(lines: None, vbo_transforms: None): ...
@wp.kernel
def compute_gfx_vertices(indices: None, vertices: None, scale: wp.vec3, gfx_vertices: None): ...
@wp.kernel
def compute_average_normals(indices: None, vertices: None, scale: wp.vec3, normals: None, faces_per_vertex: None): ...
@wp.kernel
def assemble_gfx_vertices(vertices: None, normals: None, faces_per_vertex: None, scale: wp.vec3, gfx_vertices: None): ...
@wp.kernel
def copy_rgb_frame(input_img: None, width: int, height: int, output_img: None): ...
@wp.kernel
def copy_rgb_frame_uint8(input_img: None, width: int, height: int, output_img: None): ...
@wp.kernel
def copy_depth_frame(input_img: None, width: int, height: int, near: float, far: float, output_img: None): ...
@wp.kernel
def copy_rgb_frame_tiles(input_img: None, positions: None, screen_width: int, screen_height: int, tile_height: int, output_img: None): ...
@wp.kernel
def copy_rgb_frame_tiles_uint8(input_img: None, positions: None, screen_width: int, screen_height: int, tile_height: int, output_img: None): ...
@wp.kernel
def copy_depth_frame_tiles(input_img: None, positions: None, screen_width: int, screen_height: int, tile_height: int, near: float, far: float, output_img: None): ...
@wp.kernel
def copy_rgb_frame_tile(input_img: None, offset_x: int, offset_y: int, screen_width: int, screen_height: int, tile_height: int, output_img: None): ...
@wp.kernel
def copy_rgb_frame_tile_uint8(input_img: None, offset_x: int, offset_y: int, screen_width: int, screen_height: int, tile_height: int, output_img: None): ...
def check_gl_error() -> None: ...

class ShapeInstancer:
    gl: Incomplete
    @classmethod
    def initialize_gl(cls) -> None: ...
    def __new__(cls, *args, **kwargs): ...
    shape_shader: Incomplete
    device: Incomplete
    face_count: int
    instance_color1_buffer: Incomplete
    instance_color2_buffer: Incomplete
    color1: Incomplete
    color2: Incomplete
    num_instances: int
    transforms: Incomplete
    scalings: Incomplete
    def __init__(self, shape_shader, device) -> None: ...
    def __del__(self) -> None: ...
    vao: Incomplete
    vbo: Incomplete
    ebo: Incomplete
    def register_shape(self, vertices, indices, color1=(1.0, 1.0, 1.0), color2=(0.0, 0.0, 0.0)) -> None: ...
    def update_colors(self, colors1, colors2) -> None: ...
    instance_transform_gl_buffer: Incomplete
    instance_ids: Incomplete
    instance_transforms: Incomplete
    instance_scalings: Incomplete
    def allocate_instances(self, positions, rotations=None, colors1=None, colors2=None, scalings=None) -> None: ...
    def update_instances(self, transforms: wp.array = None, scalings: wp.array = None, colors1=None, colors2=None): ...
    def render(self) -> None: ...
    vbo_transforms: Incomplete
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def str_buffer(string: str): ...
def arr_pointer(arr: np.ndarray): ...

class OpenGLRenderer:
    default_num_segments: int
    gl: Incomplete
    @classmethod
    def initialize_gl(cls) -> None: ...
    camera_near_plane: Incomplete
    camera_far_plane: Incomplete
    camera_fov: Incomplete
    background_color: Incomplete
    draw_grid: Incomplete
    draw_sky: Incomplete
    draw_axis: Incomplete
    show_info: Incomplete
    render_wireframe: Incomplete
    render_depth: Incomplete
    enable_backface_culling: Incomplete
    window: Incomplete
    headless: Incomplete
    app: Incomplete
    enable_mouse_interaction: Incomplete
    enable_keyboard_interaction: Incomplete
    render_2d_callbacks: Incomplete
    render_3d_callbacks: Incomplete
    time: float
    clock_time: float
    skip_rendering: bool
    def __init__(self, title: str = 'Warp', scaling: float = 1.0, fps: int = 60, up_axis: str = 'Y', screen_width: int = 1024, screen_height: int = 768, near_plane: float = 1.0, far_plane: float = 100.0, camera_fov: float = 45.0, camera_pos=(0.0, 2.0, 10.0), camera_front=(0.0, 0.0, -1.0), camera_up=(0.0, 1.0, 0.0), background_color=(0.53, 0.8, 0.92), draw_grid: bool = True, draw_sky: bool = True, draw_axis: bool = True, show_info: bool = True, render_wireframe: bool = False, render_depth: bool = False, axis_scale: float = 1.0, vsync: bool = False, headless=None, enable_backface_culling: bool = True, enable_mouse_interaction: bool = True, enable_keyboard_interaction: bool = True, device=None) -> None: ...
    @property
    def paused(self): ...
    @paused.setter
    def paused(self, value) -> None: ...
    @property
    def has_exit(self): ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    @property
    def tiled_rendering(self): ...
    @tiled_rendering.setter
    def tiled_rendering(self, value) -> None: ...
    def setup_tiled_rendering(self, instances: list[list[int]], rescale_window: bool = False, tile_width: int | None = None, tile_height: int | None = None, tile_ncols: int | None = None, tile_nrows: int | None = None, tile_positions: list[tuple[int]] | None = None, tile_sizes: list[tuple[int]] | None = None, projection_matrices: list[Mat44] | None = None, view_matrices: list[Mat44] | None = None): ...
    def update_tile(self, tile_id, instances: list[int] | None = None, projection_matrix: Mat44 | None = None, view_matrix: Mat44 | None = None, tile_size: tuple[int] | None = None, tile_position: tuple[int] | None = None): ...
    @staticmethod
    def compute_projection_matrix(fov: float, aspect_ratio: float, near_plane: float, far_plane: float) -> Mat44: ...
    def update_projection_matrix(self) -> None: ...
    @property
    def camera_pos(self): ...
    @camera_pos.setter
    def camera_pos(self, value) -> None: ...
    @property
    def camera_front(self): ...
    @camera_front.setter
    def camera_front(self, value) -> None: ...
    @property
    def camera_up(self): ...
    @camera_up.setter
    def camera_up(self, value) -> None: ...
    def compute_view_matrix(self, cam_pos, cam_front, cam_up): ...
    def update_view_matrix(self, cam_pos=None, cam_front=None, cam_up=None, stiffness: float = 1.0) -> None: ...
    @staticmethod
    def compute_model_matrix(camera_axis: int, scaling: float): ...
    def update_model_matrix(self, model_matrix: Mat44 | None = None): ...
    @property
    def num_tiles(self): ...
    @property
    def tile_width(self): ...
    @property
    def tile_height(self): ...
    @property
    def num_shapes(self): ...
    @property
    def num_instances(self): ...
    @property
    def scaling(self): ...
    @scaling.setter
    def scaling(self, scaling) -> None: ...
    def begin_frame(self, t: float | None = None): ...
    def end_frame(self) -> None: ...
    def update(self) -> None: ...
    def register_input_processor(self, callback) -> None: ...
    def register_key_press_callback(self, callback) -> None: ...
    def register_shape(self, geo_hash, vertices, indices, color1=None, color2=None): ...
    def deregister_shape(self, shape) -> None: ...
    def add_shape_instance(self, name: str, shape: int, body, pos: tuple, rot: tuple, scale: tuple = (1.0, 1.0, 1.0), color1=None, color2=None, custom_index: int = -1, visible: bool = True): ...
    def remove_shape_instance(self, name: str): ...
    def update_instance_colors(self) -> None: ...
    def allocate_shape_instances(self) -> None: ...
    def update_shape_instance(self, name, pos=None, rot=None, color1=None, color2=None, visible=None): ...
    def update_shape_instances(self) -> None: ...
    def update_body_transforms(self, body_tf: wp.array): ...
    def register_body(self, name): ...
    def is_running(self): ...
    def save(self) -> None: ...
    def get_pixels(self, target_image: wp.array, split_up_tiles: bool = True, mode: str = 'rgb', use_uint8: bool = False): ...
    def render_plane(self, name: str, pos: tuple, rot: tuple, width: float, length: float, color: tuple = (1.0, 1.0, 1.0), color2=None, parent_body: str | None = None, is_template: bool = False, u_scaling: float = 1.0, v_scaling: float = 1.0, visible: bool = True): ...
    def render_ground(self, size: float = 1000.0, plane=None): ...
    def render_sphere(self, name: str, pos: tuple, rot: tuple, radius: float, parent_body: str | None = None, is_template: bool = False, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_capsule(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_cylinder(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_cone(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_box(self, name: str, pos: tuple, rot: tuple, extents: tuple, parent_body: str | None = None, is_template: bool = False, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_mesh(self, name: str, points, indices, colors=None, pos=(0.0, 0.0, 0.0), rot=(0.0, 0.0, 0.0, 1.0), scale=(1.0, 1.0, 1.0), update_topology: bool = False, parent_body: str | None = None, is_template: bool = False, smooth_shading: bool = True, visible: bool = True): ...
    def render_arrow(self, name: str, pos: tuple, rot: tuple, base_radius: float, base_height: float, cap_radius: float | None = None, cap_height: float | None = None, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_ref(self, name: str, path: str, pos: tuple, rot: tuple, scale: tuple, color: tuple[float, float, float] | None = None): ...
    def render_points(self, name: str, points, radius, colors=None, as_spheres: bool = True, visible: bool = True): ...
    def render_line_list(self, name: str, vertices, indices, color: tuple[float, float, float] | None = None, radius: float = 0.01, visible: bool = True): ...
    def render_line_strip(self, name: str, vertices, color: tuple[float, float, float] | None = None, radius: float = 0.01, visible: bool = True): ...
    def update_shape_vertices(self, shape, points, scale) -> None: ...
