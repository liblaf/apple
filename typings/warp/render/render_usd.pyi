from _typeshed import Incomplete

UP_AXIS_TOKEN: Incomplete
UP_AXIS_VEC: Incomplete

class UsdRenderer:
    stage: Incomplete
    up_axis: Incomplete
    fps: Incomplete
    time: float
    draw_points: bool
    draw_springs: bool
    draw_triangles: bool
    root: Incomplete
    def __init__(self, stage, up_axis: str = 'Y', fps: int = 60, scaling: float = 1.0) -> None: ...
    def begin_frame(self, time) -> None: ...
    def end_frame(self) -> None: ...
    def register_body(self, body_name) -> None: ...
    def add_shape_instance(self, name: str, shape: int, body, pos: tuple, rot: tuple, scale: tuple = (1.0, 1.0, 1.0), color1=None, color2=None, custom_index: int = -1, visible: bool = True): ...
    def render_plane(self, name: str, pos: tuple, rot: tuple, width: float, length: float, color: tuple[float, float, float] = (1.0, 1.0, 1.0), color2=None, parent_body: str | None = None, is_template: bool = False, u_scaling: float = 1.0, v_scaling: float = 1.0, visible: bool = True): ...
    def render_ground(self, size: float = 100.0, plane=None): ...
    def render_sphere(self, name: str, pos: tuple, rot: tuple, radius: float, parent_body: str | None = None, is_template: bool = False, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_capsule(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_cylinder(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_cone(self, name: str, pos: tuple, rot: tuple, radius: float, half_height: float, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_box(self, name: str, pos: tuple, rot: tuple, extents: tuple, parent_body: str | None = None, is_template: bool = False, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_ref(self, name: str, path: str, pos: tuple, rot: tuple, scale: tuple, color: tuple | None = None): ...
    def render_mesh(self, name: str, points, indices, colors=None, pos=(0.0, 0.0, 0.0), rot=(0.0, 0.0, 0.0, 1.0), scale=(1.0, 1.0, 1.0), update_topology: bool = False, parent_body: str | None = None, is_template: bool = False, smooth_shading: bool = True, visible: bool = True): ...
    def render_arrow(self, name: str, pos: tuple, rot: tuple, base_radius: float, base_height: float, cap_radius: float | None = None, cap_height: float | None = None, parent_body: str | None = None, is_template: bool = False, up_axis: int = 1, color: tuple[float, float, float] | None = None, visible: bool = True): ...
    def render_line_list(self, name: str, vertices, indices, color: tuple[float, float, float] | None = None, radius: float = 0.01, visible: bool = True): ...
    def render_line_strip(self, name: str, vertices, color: tuple[float, float, float] | None = None, radius: float = 0.01, visible: bool = True): ...
    def render_points(self, name: str, points, radius, colors=None, as_spheres: bool = True, visible: bool = True): ...
    def update_body_transforms(self, body_q) -> None: ...
    def save(self): ...
