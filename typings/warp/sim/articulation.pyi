import warp as wp
from .utils import quat_decompose as quat_decompose, quat_twist as quat_twist

@wp.func
def compute_2d_rotational_dofs(axis_0: wp.vec3, axis_1: wp.vec3, q0: float, q1: float, qd0: float, qd1: float): ...
@wp.func
def invert_2d_rotational_dofs(axis_0: wp.vec3, axis_1: wp.vec3, q_p: wp.quat, q_c: wp.quat, w_err: wp.vec3): ...
@wp.func
def compute_3d_rotational_dofs(axis_0: wp.vec3, axis_1: wp.vec3, axis_2: wp.vec3, q0: float, q1: float, q2: float, qd0: float, qd1: float, qd2: float): ...
@wp.func
def invert_3d_rotational_dofs(axis_0: wp.vec3, axis_1: wp.vec3, axis_2: wp.vec3, q_p: wp.quat, q_c: wp.quat, w_err: wp.vec3): ...
@wp.func
def eval_single_articulation_fk(joint_start: int, joint_end: int, joint_q: None, joint_qd: None, joint_q_start: None, joint_qd_start: None, joint_type: None, joint_parent: None, joint_child: None, joint_X_p: None, joint_X_c: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, body_com: None, body_q: None, body_qd: None): ...
def eval_fk(model, joint_q, joint_qd, mask, state) -> None: ...
@wp.func
def reconstruct_angular_q_qd(q_pc: wp.quat, w_err: wp.vec3, X_wp: wp.transform, axis: wp.vec3): ...
@wp.kernel
def eval_articulation_ik(body_q: None, body_qd: None, body_com: None, joint_type: None, joint_parent: None, joint_child: None, joint_X_p: None, joint_X_c: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, joint_q_start: None, joint_qd_start: None, joint_q: None, joint_qd: None): ...
def eval_ik(model, state, joint_q, joint_qd) -> None: ...
