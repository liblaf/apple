import warp as wp
from .model import ModelShapeGeometry as ModelShapeGeometry, PARTICLE_FLAG_ACTIVE as PARTICLE_FLAG_ACTIVE
from _typeshed import Incomplete
from warp.sim.model import Model as Model, State as State

TRI_CONTACT_FEATURE_VERTEX_A: Incomplete
TRI_CONTACT_FEATURE_VERTEX_B: Incomplete
TRI_CONTACT_FEATURE_VERTEX_C: Incomplete
TRI_CONTACT_FEATURE_EDGE_AB: Incomplete
TRI_CONTACT_FEATURE_EDGE_AC: Incomplete
TRI_CONTACT_FEATURE_EDGE_BC: Incomplete
TRI_CONTACT_FEATURE_FACE_INTERIOR: Incomplete
VERTEX_COLLISION_BUFFER_OVERFLOW_INDEX: Incomplete
TRI_COLLISION_BUFFER_OVERFLOW_INDEX: Incomplete
EDGE_COLLISION_BUFFER_OVERFLOW_INDEX: Incomplete
TRI_TRI_COLLISION_BUFFER_OVERFLOW_INDEX: Incomplete

@wp.func
def build_orthonormal_basis(n: wp.vec3): ...
@wp.func
def triangle_closest_point_barycentric(a: wp.vec3, b: wp.vec3, c: wp.vec3, p: wp.vec3): ...
@wp.func
def triangle_closest_point(a: wp.vec3, b: wp.vec3, c: wp.vec3, p: wp.vec3): ...
@wp.func
def sphere_sdf(center: wp.vec3, radius: float, p: wp.vec3): ...
@wp.func
def sphere_sdf_grad(center: wp.vec3, radius: float, p: wp.vec3): ...
@wp.func
def box_sdf(upper: wp.vec3, p: wp.vec3): ...
@wp.func
def box_sdf_grad(upper: wp.vec3, p: wp.vec3): ...
@wp.func
def capsule_sdf(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def capsule_sdf_grad(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def cylinder_sdf(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def cylinder_sdf_grad(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def cone_sdf(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def cone_sdf_grad(radius: float, half_height: float, p: wp.vec3): ...
@wp.func
def plane_sdf(width: float, length: float, p: wp.vec3): ...
@wp.func
def closest_point_plane(width: float, length: float, point: wp.vec3): ...
@wp.func
def closest_point_line_segment(a: wp.vec3, b: wp.vec3, point: wp.vec3): ...
@wp.func
def closest_point_box(upper: wp.vec3, point: wp.vec3): ...
@wp.func
def get_box_vertex(point_id: int, upper: wp.vec3): ...
@wp.func
def get_box_edge(edge_id: int, upper: wp.vec3): ...
@wp.func
def get_plane_edge(edge_id: int, plane_width: float, plane_length: float): ...
@wp.func
def closest_edge_coordinate_box(upper: wp.vec3, edge_a: wp.vec3, edge_b: wp.vec3, max_iter: int): ...
@wp.func
def closest_edge_coordinate_plane(plane_width: float, plane_length: float, edge_a: wp.vec3, edge_b: wp.vec3, max_iter: int): ...
@wp.func
def closest_edge_coordinate_capsule(radius: float, half_height: float, edge_a: wp.vec3, edge_b: wp.vec3, max_iter: int): ...
@wp.func
def mesh_sdf(mesh: wp.uint64, point: wp.vec3, max_dist: float): ...
@wp.func
def closest_point_mesh(mesh: wp.uint64, point: wp.vec3, max_dist: float): ...
@wp.func
def closest_edge_coordinate_mesh(mesh: wp.uint64, edge_a: wp.vec3, edge_b: wp.vec3, max_iter: int, max_dist: float): ...
@wp.func
def volume_grad(volume: wp.uint64, p: wp.vec3): ...
@wp.func
def counter_increment(counter: None, counter_index: int, tids: None, tid: int): ...
def replay_counter_increment(counter: None, counter_index: int, tids: None, tid: int): ...
@wp.func
def limited_counter_increment(counter: None, counter_index: int, tids: None, tid: int, index_limit: int): ...
def replay_limited_counter_increment(counter: None, counter_index: int, tids: None, tid: int, index_limit: int): ...
@wp.kernel
def create_soft_contacts(particle_x: None, particle_radius: None, particle_flags: None, body_X_wb: None, shape_X_bs: None, shape_body: None, geo: ModelShapeGeometry, margin: float, soft_contact_max: int, shape_count: int, soft_contact_count: None, soft_contact_particle: None, soft_contact_shape: None, soft_contact_body_pos: None, soft_contact_body_vel: None, soft_contact_normal: None, soft_contact_tids: None): ...
def count_contact_points(contact_pairs: None, geo: ModelShapeGeometry, mesh_contact_max: int, contact_count: None): ...
def broadphase_collision_pairs(contact_pairs: None, body_q: None, shape_X_bs: None, shape_body: None, body_mass: None, num_shapes: int, geo: ModelShapeGeometry, collision_radius: None, rigid_contact_max: int, rigid_contact_margin: float, mesh_contact_max: int, iterate_mesh_vertices: bool, contact_count: None, contact_shape0: None, contact_shape1: None, contact_point_id: None, contact_point_limit: None): ...
@wp.kernel
def handle_contact_pairs(body_q: None, shape_X_bs: None, shape_body: None, geo: ModelShapeGeometry, rigid_contact_margin: float, contact_broad_shape0: None, contact_broad_shape1: None, num_shapes: int, contact_point_id: None, contact_point_limit: None, edge_sdf_iter: int, contact_count: None, contact_shape0: None, contact_shape1: None, contact_point0: None, contact_point1: None, contact_offset0: None, contact_offset1: None, contact_normal: None, contact_thickness: None, contact_pairwise_counter: None, contact_tids: None): ...
def collide(model: Model, state: State, edge_sdf_iter: int = 10, iterate_mesh_vertices: bool = True, requires_grad: bool | None = None) -> None: ...
@wp.func
def compute_tri_aabb(v1: wp.vec3, v2: wp.vec3, v3: wp.vec3): ...
@wp.kernel
def compute_tri_aabbs(pos: None, tri_indices: None, lower_bounds: None, upper_bounds: None): ...
@wp.kernel
def compute_edge_aabbs(pos: None, edge_indices: None, lower_bounds: None, upper_bounds: None): ...
@wp.func
def tri_is_neighbor(a_1: wp.int32, a_2: wp.int32, a_3: wp.int32, b_1: wp.int32, b_2: wp.int32, b_3: wp.int32): ...
@wp.func
def vertex_adjacent_to_triangle(v: wp.int32, a: wp.int32, b: wp.int32, c: wp.int32): ...
@wp.kernel
def init_triangle_collision_data_kernel(query_radius: float, triangle_colliding_vertices_count: None, triangle_colliding_vertices_min_dist: None, resize_flags: None): ...
@wp.kernel
def vertex_triangle_collision_detection_kernel(query_radius: float, bvh_id: wp.uint64, pos: None, tri_indices: None, vertex_colliding_triangles_offsets: None, vertex_colliding_triangles_buffer_sizes: None, triangle_colliding_vertices_offsets: None, triangle_colliding_vertices_buffer_sizes: None, vertex_colliding_triangles: None, vertex_colliding_triangles_count: None, vertex_colliding_triangles_min_dist: None, triangle_colliding_vertices: None, triangle_colliding_vertices_count: None, triangle_colliding_vertices_min_dist: None, resize_flags: None): ...
@wp.kernel
def vertex_triangle_collision_detection_no_triangle_buffers_kernel(query_radius: float, bvh_id: wp.uint64, pos: None, tri_indices: None, vertex_colliding_triangles_offsets: None, vertex_colliding_triangles_buffer_sizes: None, vertex_colliding_triangles: None, vertex_colliding_triangles_count: None, vertex_colliding_triangles_min_dist: None, triangle_colliding_vertices_min_dist: None, resize_flags: None): ...
@wp.kernel
def edge_colliding_edges_detection_kernel(query_radius: float, bvh_id: wp.uint64, pos: None, edge_indices: None, edge_colliding_edges_offsets: None, edge_colliding_edges_buffer_sizes: None, edge_edge_parallel_epsilon: float, edge_colliding_edges: None, edge_colliding_edges_count: None, edge_colliding_edges_min_dist: None, resize_flags: None): ...
@wp.kernel
def triangle_triangle_collision_detection_kernel(bvh_id: wp.uint64, pos: None, tri_indices: None, triangle_intersecting_triangles_offsets: None, triangle_intersecting_triangles: None, triangle_intersecting_triangles_count: None, resize_flags: None): ...

class TriMeshCollisionInfo:
    vertex_indices: None
    vertex_colliding_triangles: None
    vertex_colliding_triangles_offsets: None
    vertex_colliding_triangles_buffer_sizes: None
    vertex_colliding_triangles_count: None
    vertex_colliding_triangles_min_dist: None
    triangle_colliding_vertices: None
    triangle_colliding_vertices_offsets: None
    triangle_colliding_vertices_buffer_sizes: None
    triangle_colliding_vertices_count: None
    triangle_colliding_vertices_min_dist: None
    edge_colliding_edges: None
    edge_colliding_edges_offsets: None
    edge_colliding_edges_buffer_sizes: None
    edge_colliding_edges_count: None
    edge_colliding_edges_min_dist: None

@wp.func
def get_vertex_colliding_triangles_count(col_info: TriMeshCollisionInfo, v: int): ...
@wp.func
def get_vertex_colliding_triangles(col_info: TriMeshCollisionInfo, v: int, i_collision: int): ...
@wp.func
def get_vertex_collision_buffer_vertex_index(col_info: TriMeshCollisionInfo, v: int, i_collision: int): ...
@wp.func
def get_triangle_colliding_vertices_count(col_info: TriMeshCollisionInfo, tri: int): ...
@wp.func
def get_triangle_colliding_vertices(col_info: TriMeshCollisionInfo, tri: int, i_collision: int): ...
@wp.func
def get_edge_colliding_edges_count(col_info: TriMeshCollisionInfo, e: int): ...
@wp.func
def get_edge_colliding_edges(col_info: TriMeshCollisionInfo, e: int, i_collision: int): ...
@wp.func
def get_edge_collision_buffer_edge_index(col_info: TriMeshCollisionInfo, e: int, i_collision: int): ...

class TriMeshCollisionDetector:
    model: Incomplete
    record_triangle_contacting_vertices: Incomplete
    vertex_positions: Incomplete
    device: Incomplete
    vertex_collision_buffer_pre_alloc: Incomplete
    vertex_collision_buffer_max_alloc: Incomplete
    triangle_collision_buffer_pre_alloc: Incomplete
    triangle_collision_buffer_max_alloc: Incomplete
    edge_collision_buffer_pre_alloc: Incomplete
    edge_collision_buffer_max_alloc: Incomplete
    triangle_triangle_collision_buffer_pre_alloc: Incomplete
    triangle_triangle_collision_buffer_max_alloc: Incomplete
    edge_edge_parallel_epsilon: Incomplete
    lower_bounds_tris: Incomplete
    upper_bounds_tris: Incomplete
    bvh_tris: Incomplete
    vertex_colliding_triangles: Incomplete
    vertex_colliding_triangles_count: Incomplete
    vertex_colliding_triangles_min_dist: Incomplete
    vertex_colliding_triangles_buffer_sizes: Incomplete
    vertex_colliding_triangles_offsets: Incomplete
    triangle_colliding_vertices: Incomplete
    triangle_colliding_vertices_count: Incomplete
    triangle_colliding_vertices_buffer_sizes: Incomplete
    triangle_colliding_vertices_offsets: Incomplete
    triangle_colliding_vertices_min_dist: Incomplete
    edge_colliding_edges: Incomplete
    edge_colliding_edges_count: Incomplete
    edge_colliding_edges_buffer_sizes: Incomplete
    edge_colliding_edges_offsets: Incomplete
    edge_colliding_edges_min_dist: Incomplete
    lower_bounds_edges: Incomplete
    upper_bounds_edges: Incomplete
    bvh_edges: Incomplete
    resize_flags: Incomplete
    collision_info: Incomplete
    triangle_intersecting_triangles: Incomplete
    triangle_intersecting_triangles_count: Incomplete
    triangle_intersecting_triangles_offsets: Incomplete
    def __init__(self, model: Model, record_triangle_contacting_vertices: bool = False, vertex_positions=None, vertex_collision_buffer_pre_alloc: int = 8, vertex_collision_buffer_max_alloc: int = 256, triangle_collision_buffer_pre_alloc: int = 16, triangle_collision_buffer_max_alloc: int = 256, edge_collision_buffer_pre_alloc: int = 8, edge_collision_buffer_max_alloc: int = 256, triangle_triangle_collision_buffer_pre_alloc: int = 8, triangle_triangle_collision_buffer_max_alloc: int = 256, edge_edge_parallel_epsilon: float = 1e-05) -> None: ...
    def get_collision_data(self): ...
    def compute_collision_buffer_offsets(self, buffer_sizes: None, offsets: None): ...
    def rebuild(self, new_pos=None) -> None: ...
    def refit(self, new_pos=None) -> None: ...
    def refit_triangles(self) -> None: ...
    def refit_edges(self) -> None: ...
    def vertex_triangle_collision_detection(self, query_radius) -> None: ...
    def edge_edge_collision_detection(self, query_radius) -> None: ...
    def triangle_triangle_intersection_detection(self) -> None: ...
