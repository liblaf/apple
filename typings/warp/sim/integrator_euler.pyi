import warp as wp
from .collide import triangle_closest_point_barycentric as triangle_closest_point_barycentric
from .integrator import Integrator as Integrator
from .model import Control as Control, Model as Model, ModelShapeGeometry as ModelShapeGeometry, ModelShapeMaterials as ModelShapeMaterials, PARTICLE_FLAG_ACTIVE as PARTICLE_FLAG_ACTIVE, State as State
from .particles import eval_particle_forces as eval_particle_forces
from .utils import quat_decompose as quat_decompose, quat_twist as quat_twist
from _typeshed import Incomplete

@wp.kernel
def eval_springs(x: None, v: None, spring_indices: None, spring_rest_lengths: None, spring_stiffness: None, spring_damping: None, f: None): ...
@wp.kernel
def eval_triangles(x: None, v: None, indices: None, pose: None, activation: None, materials: None, f: None): ...
@wp.kernel
def eval_triangles_contact(num_particles: int, x: None, v: None, indices: None, materials: None, particle_radius: None, f: None): ...
@wp.kernel
def eval_triangles_body_contacts(num_particles: int, x: None, v: None, indices: None, body_x: None, body_r: None, body_v: None, body_w: None, contact_body: None, contact_point: None, contact_dist: None, contact_mat: None, materials: None, tri_f: None): ...
@wp.kernel
def eval_bending(x: None, v: None, indices: None, rest: None, bending_properties: None, f: None): ...
@wp.kernel
def eval_tetrahedra(x: None, v: None, indices: None, pose: None, activation: None, materials: None, f: None): ...
@wp.kernel
def eval_particle_ground_contacts(particle_x: None, particle_v: None, particle_radius: None, particle_flags: None, ke: float, kd: float, kf: float, mu: float, ground: None, f: None): ...
@wp.kernel
def eval_particle_contacts(particle_x: None, particle_v: None, body_q: None, body_qd: None, particle_radius: None, particle_flags: None, body_com: None, shape_body: None, shape_materials: ModelShapeMaterials, particle_ke: float, particle_kd: float, particle_kf: float, particle_mu: float, particle_ka: float, contact_count: None, contact_particle: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, contact_max: int, body_f_in_world_frame: bool, particle_f: None, body_f: None): ...
@wp.kernel
def eval_rigid_contacts(body_q: None, body_qd: None, body_com: None, shape_materials: ModelShapeMaterials, geo: ModelShapeGeometry, shape_body: None, contact_count: None, contact_point0: None, contact_point1: None, contact_normal: None, contact_shape0: None, contact_shape1: None, force_in_world_frame: bool, friction_smoothing: float, body_f: None): ...
@wp.func
def eval_joint_force(q: float, qd: float, act: float, target_ke: float, target_kd: float, limit_lower: float, limit_upper: float, limit_ke: float, limit_kd: float, mode: wp.int32) -> float: ...
@wp.kernel
def eval_body_joints(body_q: None, body_qd: None, body_com: None, joint_qd_start: None, joint_type: None, joint_enabled: None, joint_child: None, joint_parent: None, joint_X_p: None, joint_X_c: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, joint_axis_mode: None, joint_act: None, joint_target_ke: None, joint_target_kd: None, joint_limit_lower: None, joint_limit_upper: None, joint_limit_ke: None, joint_limit_kd: None, joint_attach_ke: float, joint_attach_kd: float, body_f: None): ...
@wp.func
def compute_muscle_force(i: int, body_X_s: None, body_v_s: None, body_com: None, muscle_links: None, muscle_points: None, muscle_activation: float, body_f_s: None): ...
@wp.kernel
def eval_muscles(body_X_s: None, body_v_s: None, body_com: None, muscle_start: None, muscle_params: None, muscle_links: None, muscle_points: None, muscle_activation: None, body_f_s: None): ...
def eval_spring_forces(model: Model, state: State, particle_f: wp.array): ...
def eval_triangle_forces(model: Model, state: State, control: Control, particle_f: wp.array): ...
def eval_triangle_contact_forces(model: Model, state: State, particle_f: wp.array): ...
def eval_bending_forces(model: Model, state: State, particle_f: wp.array): ...
def eval_particle_ground_contact_forces(model: Model, state: State, particle_f: wp.array): ...
def eval_tetrahedral_forces(model: Model, state: State, control: Control, particle_f: wp.array): ...
def eval_body_contact_forces(model: Model, state: State, particle_f: wp.array, friction_smoothing: float = 1.0): ...
def eval_body_joint_forces(model: Model, state: State, control: Control, body_f: wp.array): ...
def eval_particle_body_contact_forces(model: Model, state: State, particle_f: wp.array, body_f: wp.array, body_f_in_world_frame: bool = False): ...
def eval_muscle_forces(model: Model, state: State, control: Control, body_f: wp.array): ...
def compute_forces(model: Model, state: State, control: Control, particle_f: wp.array, body_f: wp.array, dt: float, friction_smoothing: float = 1.0): ...

class SemiImplicitIntegrator(Integrator):
    angular_damping: Incomplete
    friction_smoothing: Incomplete
    def __init__(self, angular_damping: float = 0.05, friction_smoothing: float = 1.0) -> None: ...
    def simulate(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
