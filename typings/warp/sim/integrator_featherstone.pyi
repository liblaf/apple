import warp as wp
from .articulation import compute_2d_rotational_dofs as compute_2d_rotational_dofs, compute_3d_rotational_dofs as compute_3d_rotational_dofs, eval_fk as eval_fk
from .integrator import Integrator as Integrator
from .integrator_euler import eval_bending_forces as eval_bending_forces, eval_joint_force as eval_joint_force, eval_muscle_forces as eval_muscle_forces, eval_particle_body_contact_forces as eval_particle_body_contact_forces, eval_particle_forces as eval_particle_forces, eval_particle_ground_contact_forces as eval_particle_ground_contact_forces, eval_rigid_contacts as eval_rigid_contacts, eval_spring_forces as eval_spring_forces, eval_tetrahedral_forces as eval_tetrahedral_forces, eval_triangle_contact_forces as eval_triangle_contact_forces, eval_triangle_forces as eval_triangle_forces
from .model import Control as Control, Model as Model, State as State
from _typeshed import Incomplete

@wp.func
def transform_twist(t: wp.transform, x: wp.spatial_vector): ...
@wp.func
def transform_wrench(t: wp.transform, x: wp.spatial_vector): ...
@wp.func
def spatial_adjoint(R: wp.mat33, S: wp.mat33): ...
@wp.kernel
def compute_spatial_inertia(body_inertia: None, body_mass: None, body_I_m: None): ...
@wp.kernel
def compute_com_transforms(body_com: None, body_X_com: None): ...
@wp.func
def spatial_transform_inertia(t: wp.transform, I: wp.spatial_matrix): ...
@wp.func
def jcalc_transform(type: int, joint_axis: None, axis_start: int, lin_axis_count: int, ang_axis_count: int, joint_q: None, start: int): ...
@wp.func
def jcalc_motion(type: int, joint_axis: None, axis_start: int, lin_axis_count: int, ang_axis_count: int, X_sc: wp.transform, joint_q: None, joint_qd: None, q_start: int, qd_start: int, joint_S_s: None): ...
@wp.func
def jcalc_tau(type: int, joint_target_ke: None, joint_target_kd: None, joint_limit_ke: None, joint_limit_kd: None, joint_S_s: None, joint_q: None, joint_qd: None, joint_act: None, joint_axis_mode: None, joint_limit_lower: None, joint_limit_upper: None, coord_start: int, dof_start: int, axis_start: int, lin_axis_count: int, ang_axis_count: int, body_f_s: wp.spatial_vector, tau: None): ...
@wp.func
def jcalc_integrate(type: int, joint_q: None, joint_qd: None, joint_qdd: None, coord_start: int, dof_start: int, lin_axis_count: int, ang_axis_count: int, dt: float, joint_q_new: None, joint_qd_new: None): ...
@wp.func
def compute_link_transform(i: int, joint_type: None, joint_parent: None, joint_child: None, joint_q_start: None, joint_q: None, joint_X_p: None, joint_X_c: None, body_X_com: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, body_q: None, body_q_com: None): ...
@wp.kernel
def eval_rigid_fk(articulation_start: None, joint_type: None, joint_parent: None, joint_child: None, joint_q_start: None, joint_q: None, joint_X_p: None, joint_X_c: None, body_X_com: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, body_q: None, body_q_com: None): ...
@wp.func
def spatial_cross(a: wp.spatial_vector, b: wp.spatial_vector): ...
@wp.func
def spatial_cross_dual(a: wp.spatial_vector, b: wp.spatial_vector): ...
@wp.func
def dense_index(stride: int, i: int, j: int): ...
@wp.func
def compute_link_velocity(i: int, joint_type: None, joint_parent: None, joint_child: None, joint_q_start: None, joint_qd_start: None, joint_q: None, joint_qd: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, body_I_m: None, body_q: None, body_q_com: None, joint_X_p: None, joint_X_c: None, gravity: wp.vec3, joint_S_s: None, body_I_s: None, body_v_s: None, body_f_s: None, body_a_s: None): ...
@wp.kernel
def eval_rigid_id(articulation_start: None, joint_type: None, joint_parent: None, joint_child: None, joint_q_start: None, joint_qd_start: None, joint_q: None, joint_qd: None, joint_axis: None, joint_axis_start: None, joint_axis_dim: None, body_I_m: None, body_q: None, body_q_com: None, joint_X_p: None, joint_X_c: None, gravity: wp.vec3, joint_S_s: None, body_I_s: None, body_v_s: None, body_f_s: None, body_a_s: None): ...
@wp.kernel
def eval_rigid_tau(articulation_start: None, joint_type: None, joint_parent: None, joint_child: None, joint_q_start: None, joint_qd_start: None, joint_axis_start: None, joint_axis_dim: None, joint_axis_mode: None, joint_q: None, joint_qd: None, joint_act: None, joint_target_ke: None, joint_target_kd: None, joint_limit_lower: None, joint_limit_upper: None, joint_limit_ke: None, joint_limit_kd: None, joint_S_s: None, body_fb_s: None, body_f_ext: None, body_ft_s: None, tau: None): ...
@wp.kernel
def eval_rigid_jacobian(articulation_start: None, articulation_J_start: None, joint_ancestor: None, joint_qd_start: None, joint_S_s: None, J: None): ...
@wp.func
def spatial_mass(body_I_s: None, joint_start: int, joint_count: int, M_start: int, M: None): ...
@wp.kernel
def eval_rigid_mass(articulation_start: None, articulation_M_start: None, body_I_s: None, M: None): ...
@wp.func
def dense_gemm(m: int, n: int, p: int, transpose_A: bool, transpose_B: bool, add_to_C: bool, A_start: int, B_start: int, C_start: int, A: None, B: None, C: None): ...
def create_inertia_matrix_kernel(num_joints, num_dofs): ...
def create_batched_cholesky_kernel(num_dofs): ...
def create_inertia_matrix_cholesky_kernel(num_joints, num_dofs): ...
@wp.kernel
def eval_dense_gemm_batched(m: None, n: None, p: None, transpose_A: bool, transpose_B: bool, A_start: None, B_start: None, C_start: None, A: None, B: None, C: None): ...
@wp.func
def dense_cholesky(n: int, A: None, R: None, A_start: int, R_start: int, L: None): ...
def adj_dense_cholesky(n: int, A: None, R: None, A_start: int, R_start: int, L: None): ...
@wp.kernel
def eval_dense_cholesky_batched(A_starts: None, A_dim: None, A: None, R: None, L: None): ...
@wp.func
def dense_subs(n: int, L_start: int, b_start: int, L: None, b: None, x: None): ...
@wp.func
def dense_solve(n: int, L_start: int, b_start: int, A: None, L: None, b: None, x: None, tmp: None): ...
def adj_dense_solve(n: int, L_start: int, b_start: int, A: None, L: None, b: None, x: None, tmp: None): ...
@wp.kernel
def eval_dense_solve_batched(L_start: None, L_dim: None, b_start: None, A: None, L: None, b: None, x: None, tmp: None): ...
@wp.kernel
def integrate_generalized_joints(joint_type: None, joint_q_start: None, joint_qd_start: None, joint_axis_dim: None, joint_q: None, joint_qd: None, joint_qdd: None, dt: float, joint_q_new: None, joint_qd_new: None): ...

class FeatherstoneIntegrator(Integrator):
    angular_damping: Incomplete
    update_mass_matrix_every: Incomplete
    friction_smoothing: Incomplete
    use_tile_gemm: Incomplete
    fuse_cholesky: Incomplete
    eval_inertia_matrix_cholesky_kernel: Incomplete
    eval_inertia_matrix_kernel: Incomplete
    def __init__(self, model, angular_damping: float = 0.05, update_mass_matrix_every: int = 1, friction_smoothing: float = 1.0, use_tile_gemm: bool = False, fuse_cholesky: bool = True) -> None: ...
    J_size: int
    M_size: int
    H_size: int
    joint_count: Incomplete
    dof_count: Incomplete
    articulation_J_start: Incomplete
    articulation_M_start: Incomplete
    articulation_H_start: Incomplete
    articulation_M_rows: Incomplete
    articulation_H_rows: Incomplete
    articulation_J_rows: Incomplete
    articulation_J_cols: Incomplete
    articulation_dof_start: Incomplete
    articulation_coord_start: Incomplete
    def compute_articulation_indices(self, model) -> None: ...
    M: Incomplete
    J: Incomplete
    P: Incomplete
    H: Incomplete
    L: Incomplete
    body_I_m: Incomplete
    body_X_com: Incomplete
    def allocate_model_aux_vars(self, model) -> None: ...
    def allocate_state_aux_vars(self, model, target, requires_grad) -> None: ...
    def simulate(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
