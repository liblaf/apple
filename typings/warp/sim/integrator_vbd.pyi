import warp as wp
from ..types import float32 as float32, matrix as matrix
from .collide import TriMeshCollisionDetector as TriMeshCollisionDetector, TriMeshCollisionInfo as TriMeshCollisionInfo, triangle_closest_point as triangle_closest_point
from .integrator import Integrator as Integrator
from .model import Control as Control, Model as Model, ModelShapeMaterials as ModelShapeMaterials, PARTICLE_FLAG_ACTIVE as PARTICLE_FLAG_ACTIVE, State as State
from _typeshed import Incomplete

VBD_DEBUG_PRINTING_OPTIONS: Incomplete

class mat66(Incomplete): ...
class mat32(Incomplete): ...
class mat43(Incomplete): ...

class ForceElementAdjacencyInfo:
    v_adj_faces: None
    v_adj_faces_offsets: None
    v_adj_edges: None
    v_adj_edges_offsets: None
    def to(self, device): ...

@wp.func
def get_vertex_num_adjacent_edges(adjacency: ForceElementAdjacencyInfo, vertex: wp.int32): ...
@wp.func
def get_vertex_adjacent_edge_id_order(adjacency: ForceElementAdjacencyInfo, vertex: wp.int32, edge: wp.int32): ...
@wp.func
def get_vertex_num_adjacent_faces(adjacency: ForceElementAdjacencyInfo, vertex: wp.int32): ...
@wp.func
def get_vertex_adjacent_face_id_order(adjacency: ForceElementAdjacencyInfo, vertex: wp.int32, face: wp.int32): ...
@wp.func
def build_orthonormal_basis(n: wp.vec3): ...
@wp.func
def calculate_triangle_deformation_gradient(face: int, tri_indices: None, pos: None, tri_pose: wp.mat22): ...
@wp.func
def green_strain(F: mat32): ...
@wp.func
def assemble_membrane_hessian(h: mat66, m1: float, m2: float): ...
@wp.func
def evaluate_stvk_force_hessian(face: int, v_order: int, pos: None, tri_indices: None, tri_pose: wp.mat22, area: float, mu: float, lmbd: float, damping: float): ...
@wp.func
def mat_vec_cross_from_3_basis(e1: wp.vec3, e2: wp.vec3, e3: wp.vec3, a: wp.vec3): ...
@wp.func
def mat_vec_cross(mat: wp.mat33, a: wp.vec3): ...
@wp.func
def evaluate_dihedral_angle_based_bending_force_hessian(bending_index: int, v_order: int, pos: None, pos_prev: None, edge_indices: None, edge_rest_angle: None, edge_rest_length: None, stiffness: float, damping: float, dt: float): ...
@wp.func
def evaluate_ground_contact_force_hessian(particle_pos: wp.vec3, particle_prev_pos: wp.vec3, particle_radius: float, ground_normal: wp.vec3, ground_level: float, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, dt: float): ...
@wp.func
def evaluate_body_particle_contact(particle_index: int, particle_pos: wp.vec3, particle_prev_pos: wp.vec3, contact_index: int, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, particle_radius: None, shape_materials: ModelShapeMaterials, shape_body: None, body_q: None, body_qd: None, body_com: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, dt: float): ...
@wp.func
def evaluate_self_contact_force_norm(dis: float, collision_radius: float, k: float): ...
@wp.func
def damp_collision(displacement: wp.vec3, collision_normal: wp.vec3, collision_hessian: wp.mat33, collision_damping: float, dt: float): ...
@wp.func
def evaluate_edge_edge_contact(v: int, v_order: int, e1: int, e2: int, pos: None, pos_prev: None, edge_indices: None, collision_radius: float, collision_stiffness: float, collision_damping: float, friction_coefficient: float, friction_epsilon: float, dt: float, edge_edge_parallel_epsilon: float): ...
@wp.func
def evaluate_edge_edge_contact_2_vertices(e1: int, e2: int, pos: None, pos_prev: None, edge_indices: None, collision_radius: float, collision_stiffness: float, collision_damping: float, friction_coefficient: float, friction_epsilon: float, dt: float, edge_edge_parallel_epsilon: float): ...
@wp.func
def evaluate_vertex_triangle_collision_force_hessian(v: int, v_order: int, tri: int, pos: None, pos_prev: None, tri_indices: None, collision_radius: float, collision_stiffness: float, collision_damping: float, friction_coefficient: float, friction_epsilon: float, dt: float): ...
@wp.func
def evaluate_vertex_triangle_collision_force_hessian_4_vertices(v: int, tri: int, pos: None, pos_prev: None, tri_indices: None, collision_radius: float, collision_stiffness: float, collision_damping: float, friction_coefficient: float, friction_epsilon: float, dt: float): ...
@wp.func
def compute_friction(mu: float, normal_contact_force: float, T: mat32, u: wp.vec2, eps_u: float): ...
@wp.kernel
def forward_step(dt: float, gravity: wp.vec3, prev_pos: None, pos: None, vel: None, inv_mass: None, external_force: None, particle_flags: None, inertia: None): ...
@wp.kernel
def forward_step_penetration_free(dt: float, gravity: wp.vec3, prev_pos: None, pos: None, vel: None, inv_mass: None, external_force: None, particle_flags: None, pos_prev_collision_detection: None, particle_conservative_bounds: None, inertia: None): ...
@wp.kernel
def compute_particle_conservative_bound(conservative_bound_relaxation: float, collision_query_radius: float, adjacency: ForceElementAdjacencyInfo, collision_info: TriMeshCollisionInfo, particle_conservative_bounds: None): ...
@wp.kernel
def validate_conservative_bound(pos: None, pos_prev_collision_detection: None, particle_conservative_bounds: None): ...
@wp.func
def apply_conservative_bound_truncation(v_index: wp.int32, pos_new: wp.vec3, pos_prev_collision_detection: None, particle_conservative_bounds: None): ...
@wp.kernel
def VBD_solve_trimesh_no_self_contact(dt: float, particle_ids_in_color: None, prev_pos: None, pos: None, vel: None, mass: None, inertia: None, particle_flags: None, tri_indices: None, tri_poses: None, tri_materials: None, tri_areas: None, edge_indices: None, edge_rest_angles: None, edge_rest_length: None, edge_bending_properties: None, adjacency: ForceElementAdjacencyInfo, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, has_ground: bool, ground: None, particle_radius: None, pos_new: None): ...
@wp.kernel
def VBD_copy_particle_positions_back(particle_ids_in_color: None, pos: None, pos_new: None): ...
@wp.kernel
def update_velocity(dt: float, prev_pos: None, pos: None, vel: None): ...
@wp.kernel
def convert_body_particle_contact_data_kernel(body_particle_contact_buffer_pre_alloc: int, soft_contact_particle: None, contact_count: None, contact_max: int, body_particle_contact_buffer: None, body_particle_contact_count: None): ...
@wp.kernel
def VBD_accumulate_contact_force_and_hessian(dt: float, current_color: int, pos_prev: None, pos: None, particle_colors: None, tri_indices: None, edge_indices: None, collision_info_array: None, collision_radius: float, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, edge_edge_parallel_epsilon: float, particle_radius: None, soft_contact_particle: None, contact_count: None, contact_max: int, shape_materials: ModelShapeMaterials, shape_body: None, body_q: None, body_qd: None, body_com: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, particle_forces: None, particle_hessians: None): ...
@wp.kernel
def VBD_accumulate_contact_force_and_hessian_no_self_contact(dt: float, current_color: int, pos_prev: None, pos: None, particle_colors: None, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, particle_radius: None, soft_contact_particle: None, contact_count: None, contact_max: int, shape_materials: ModelShapeMaterials, shape_body: None, body_q: None, body_qd: None, body_com: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, particle_forces: None, particle_hessians: None): ...
@wp.kernel
def VBD_solve_trimesh_with_self_contact_penetration_free(dt: float, particle_ids_in_color: None, pos_prev: None, pos: None, vel: None, mass: None, inertia: None, particle_flags: None, tri_indices: None, tri_poses: None, tri_materials: None, tri_areas: None, edge_indices: None, edge_rest_angles: None, edge_rest_length: None, edge_bending_properties: None, adjacency: ForceElementAdjacencyInfo, particle_forces: None, particle_hessians: None, pos_prev_collision_detection: None, particle_conservative_bounds: None, has_ground: bool, ground: None, soft_contact_ke: float, soft_contact_kd: float, friction_mu: float, friction_epsilon: float, particle_radius: None, pos_new: None): ...

class VBDIntegrator(Integrator):
    device: Incomplete
    model: Incomplete
    iterations: Incomplete
    particle_q_prev: Incomplete
    inertia: Incomplete
    adjacency: Incomplete
    body_particle_contact_count: Incomplete
    handle_self_contact: Incomplete
    conservative_bound_relaxation: Incomplete
    pos_prev_collision_detection: Incomplete
    particle_conservative_bounds: Incomplete
    trimesh_collision_detector: Incomplete
    trimesh_collision_info: Incomplete
    collision_evaluation_kernel_launch_size: Incomplete
    particle_forces: Incomplete
    particle_hessians: Incomplete
    friction_epsilon: Incomplete
    def __init__(self, model: Model, iterations: int = 10, handle_self_contact: bool = False, penetration_free_conservative_bound_relaxation: float = 0.42, friction_epsilon: float = 0.01, body_particle_contact_buffer_pre_alloc: int = 4, vertex_collision_buffer_pre_alloc: int = 32, edge_collision_buffer_pre_alloc: int = 64, triangle_collision_buffer_pre_alloc: int = 32, edge_edge_parallel_epsilon: float = 1e-05) -> None: ...
    def compute_force_element_adjacency(self, model): ...
    def simulate(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
    def simulate_one_step_no_self_contact(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
    def simulate_one_step_with_collisions_penetration_free(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
    def collision_detection_penetration_free(self, current_state, dt) -> None: ...
    def rebuild_bvh(self, state: State): ...
    @wp.kernel
    def count_num_adjacent_edges(edges_array: None, num_vertex_adjacent_edges: None): ...
    @wp.kernel
    def fill_adjacent_edges(edges_array: None, vertex_adjacent_edges_offsets: None, vertex_adjacent_edges_fill_count: None, vertex_adjacent_edges: None): ...
    @wp.kernel
    def count_num_adjacent_faces(face_indices: None, num_vertex_adjacent_faces: None): ...
    @wp.kernel
    def fill_adjacent_faces(face_indices: None, vertex_adjacent_faces_offsets: None, vertex_adjacent_faces_fill_count: None, vertex_adjacent_faces: None): ...
