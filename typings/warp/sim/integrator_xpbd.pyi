import warp as wp
from .integrator import Integrator as Integrator
from .model import Control as Control, JOINT_MODE_FORCE as JOINT_MODE_FORCE, JOINT_MODE_TARGET_POSITION as JOINT_MODE_TARGET_POSITION, JOINT_MODE_TARGET_VELOCITY as JOINT_MODE_TARGET_VELOCITY, Model as Model, ModelShapeMaterials as ModelShapeMaterials, PARTICLE_FLAG_ACTIVE as PARTICLE_FLAG_ACTIVE, State as State
from .utils import vec_abs as vec_abs, vec_leaky_max as vec_leaky_max, vec_leaky_min as vec_leaky_min, vec_max as vec_max, vec_min as vec_min, velocity_at_point as velocity_at_point
from _typeshed import Incomplete

@wp.kernel
def solve_particle_ground_contacts(particle_x: None, particle_v: None, invmass: None, particle_radius: None, particle_flags: None, ke: float, kd: float, kf: float, mu: float, ground: None, dt: float, relaxation: float, delta: None): ...
@wp.kernel
def apply_particle_shape_restitution(particle_x_new: None, particle_v_new: None, particle_x_old: None, particle_v_old: None, particle_invmass: None, particle_radius: None, particle_flags: None, body_q: None, body_qd: None, body_com: None, body_m_inv: None, body_I_inv: None, shape_body: None, shape_materials: ModelShapeMaterials, particle_ka: float, restitution: float, contact_count: None, contact_particle: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, contact_max: int, dt: float, relaxation: float, particle_v_out: None): ...
@wp.kernel
def apply_particle_ground_restitution(particle_x_new: None, particle_v_new: None, particle_x_old: None, particle_v_old: None, particle_invmass: None, particle_radius: None, particle_flags: None, particle_ka: float, restitution: float, ground: None, dt: float, relaxation: float, particle_v_out: None): ...
@wp.kernel
def solve_particle_shape_contacts(particle_x: None, particle_v: None, particle_invmass: None, particle_radius: None, particle_flags: None, body_q: None, body_qd: None, body_com: None, body_m_inv: None, body_I_inv: None, shape_body: None, shape_materials: ModelShapeMaterials, particle_mu: float, particle_ka: float, contact_count: None, contact_particle: None, contact_shape: None, contact_body_pos: None, contact_body_vel: None, contact_normal: None, contact_max: int, dt: float, relaxation: float, delta: None, body_delta: None): ...
@wp.kernel
def solve_particle_particle_contacts(grid: wp.uint64, particle_x: None, particle_v: None, particle_invmass: None, particle_radius: None, particle_flags: None, k_mu: float, k_cohesion: float, max_radius: float, dt: float, relaxation: float, deltas: None): ...
@wp.kernel
def solve_springs(x: None, v: None, invmass: None, spring_indices: None, spring_rest_lengths: None, spring_stiffness: None, spring_damping: None, dt: float, lambdas: None, delta: None): ...
@wp.kernel
def bending_constraint(x: None, v: None, invmass: None, indices: None, rest: None, bending_properties: None, dt: float, lambdas: None, delta: None): ...
@wp.kernel
def solve_tetrahedra(x: None, v: None, inv_mass: None, indices: None, rest_matrix: None, activation: None, materials: None, dt: float, relaxation: float, delta: None): ...
@wp.kernel
def solve_tetrahedra2(x: None, v: None, inv_mass: None, indices: None, pose: None, activation: None, materials: None, dt: float, relaxation: float, delta: None): ...
@wp.kernel
def apply_particle_deltas(x_orig: None, x_pred: None, particle_flags: None, delta: None, dt: float, v_max: float, x_out: None, v_out: None): ...
@wp.kernel
def apply_body_deltas(q_in: None, qd_in: None, body_com: None, body_I: None, body_inv_m: None, body_inv_I: None, deltas: None, constraint_inv_weights: None, dt: float, q_out: None, qd_out: None): ...
@wp.kernel
def apply_body_delta_velocities(deltas: None, qd_out: None): ...
@wp.kernel
def apply_joint_actions(body_q: None, body_com: None, joint_type: None, joint_parent: None, joint_child: None, joint_X_p: None, joint_X_c: None, joint_axis_start: None, joint_axis_dim: None, joint_axis: None, joint_axis_mode: None, joint_act: None, body_f: None): ...
@wp.func
def update_joint_axis_mode(mode: wp.int32, axis: wp.vec3, input_axis_mode: wp.vec3i): ...
@wp.func
def update_joint_axis_limits(axis: wp.vec3, limit_lower: float, limit_upper: float, input_limits: wp.spatial_vector): ...
@wp.func
def update_joint_axis_target_ke_kd(axis: wp.vec3, target: float, target_ke: float, target_kd: float, input_target_ke_kd: wp.mat33): ...
@wp.func
def compute_linear_correction_3d(dx: wp.vec3, r1: wp.vec3, r2: wp.vec3, tf1: wp.transform, tf2: wp.transform, m_inv1: float, m_inv2: float, I_inv1: wp.mat33, I_inv2: wp.mat33, lambda_in: float, compliance: float, damping: float, dt: float) -> float: ...
@wp.func
def compute_angular_correction_3d(corr: wp.vec3, q1: wp.quat, q2: wp.quat, m_inv1: float, m_inv2: float, I_inv1: wp.mat33, I_inv2: wp.mat33, alpha_tilde: float, relaxation: float, dt: float): ...
@wp.kernel
def solve_simple_body_joints(body_q: None, body_qd: None, body_com: None, body_inv_m: None, body_inv_I: None, joint_type: None, joint_enabled: None, joint_parent: None, joint_child: None, joint_X_p: None, joint_X_c: None, joint_limit_lower: None, joint_limit_upper: None, joint_axis_start: None, joint_axis_dim: None, joint_axis_mode: None, joint_axis: None, joint_target: None, joint_target_ke: None, joint_target_kd: None, joint_linear_compliance: None, joint_angular_compliance: None, angular_relaxation: float, linear_relaxation: float, dt: float, deltas: None): ...
@wp.kernel
def solve_body_joints(body_q: None, body_qd: None, body_com: None, body_inv_m: None, body_inv_I: None, joint_type: None, joint_enabled: None, joint_parent: None, joint_child: None, joint_X_p: None, joint_X_c: None, joint_limit_lower: None, joint_limit_upper: None, joint_axis_start: None, joint_axis_dim: None, joint_axis_mode: None, joint_axis: None, joint_act: None, joint_target_ke: None, joint_target_kd: None, joint_linear_compliance: None, joint_angular_compliance: None, angular_relaxation: float, linear_relaxation: float, dt: float, deltas: None): ...
@wp.func
def compute_contact_constraint_delta(err: float, tf_a: wp.transform, tf_b: wp.transform, m_inv_a: float, m_inv_b: float, I_inv_a: wp.mat33, I_inv_b: wp.mat33, linear_a: wp.vec3, linear_b: wp.vec3, angular_a: wp.vec3, angular_b: wp.vec3, relaxation: float, dt: float) -> float: ...
@wp.func
def compute_positional_correction(err: float, derr: float, tf_a: wp.transform, tf_b: wp.transform, m_inv_a: float, m_inv_b: float, I_inv_a: wp.mat33, I_inv_b: wp.mat33, linear_a: wp.vec3, linear_b: wp.vec3, angular_a: wp.vec3, angular_b: wp.vec3, lambda_in: float, compliance: float, damping: float, dt: float) -> float: ...
@wp.func
def compute_angular_correction(err: float, derr: float, tf_a: wp.transform, tf_b: wp.transform, I_inv_a: wp.mat33, I_inv_b: wp.mat33, angular_a: wp.vec3, angular_b: wp.vec3, lambda_in: float, compliance: float, damping: float, dt: float) -> float: ...
@wp.kernel
def solve_body_contact_positions(body_q: None, body_qd: None, body_com: None, body_m_inv: None, body_I_inv: None, shape_body: None, contact_count: None, contact_point0: None, contact_point1: None, contact_offset0: None, contact_offset1: None, contact_normal: None, contact_thickness: None, contact_shape0: None, contact_shape1: None, shape_materials: ModelShapeMaterials, relaxation: float, dt: float, contact_torsional_friction: float, contact_rolling_friction: float, deltas: None, contact_inv_weight: None): ...
@wp.kernel
def update_body_velocities(poses: None, poses_prev: None, body_com: None, dt: float, qd_out: None): ...
@wp.kernel
def apply_rigid_restitution(body_q: None, body_qd: None, body_q_prev: None, body_qd_prev: None, body_com: None, body_m_inv: None, body_I_inv: None, shape_body: None, contact_count: None, contact_normal: None, contact_shape0: None, contact_shape1: None, shape_materials: ModelShapeMaterials, contact_point0: None, contact_point1: None, contact_offset0: None, contact_offset1: None, contact_thickness: None, contact_inv_weight: None, gravity: wp.vec3, dt: float, deltas: None): ...

class XPBDIntegrator(Integrator):
    iterations: Incomplete
    soft_body_relaxation: Incomplete
    soft_contact_relaxation: Incomplete
    joint_linear_relaxation: Incomplete
    joint_angular_relaxation: Incomplete
    rigid_contact_relaxation: Incomplete
    rigid_contact_con_weighting: Incomplete
    angular_damping: Incomplete
    enable_restitution: Incomplete
    compute_body_velocity_from_position_delta: bool
    def __init__(self, iterations: int = 2, soft_body_relaxation: float = 0.9, soft_contact_relaxation: float = 0.9, joint_linear_relaxation: float = 0.7, joint_angular_relaxation: float = 0.4, rigid_contact_relaxation: float = 0.8, rigid_contact_con_weighting: bool = True, angular_damping: float = 0.0, enable_restitution: bool = False) -> None: ...
    def apply_particle_deltas(self, model: Model, state_in: State, state_out: State, particle_deltas: wp.array, dt: float): ...
    def apply_body_deltas(self, model: Model, state_in: State, state_out: State, body_deltas: wp.array, dt: float, rigid_contact_inv_weight: wp.array = None): ...
    particle_q_init: Incomplete
    particle_qd_init: Incomplete
    def simulate(self, model: Model, state_in: State, state_out: State, dt: float, control: Control = None): ...
