import warp as wp

@wp.func
def velocity_at_point(qd: wp.spatial_vector, r: wp.vec3): ...
@wp.func
def quat_twist(axis: wp.vec3, q: wp.quat): ...
@wp.func
def quat_twist_angle(axis: wp.vec3, q: wp.quat): ...
@wp.func
def quat_decompose(q: wp.quat): ...
@wp.func
def quat_to_rpy(q: wp.quat): ...
@wp.func
def quat_to_euler(q: wp.quat, i: int, j: int, k: int) -> wp.vec3: ...
@wp.func
def quat_from_euler(e: wp.vec3, i: int, j: int, k: int) -> wp.quat: ...
@wp.func
def transform_twist(t: wp.transform, x: wp.spatial_vector): ...
@wp.func
def transform_wrench(t: wp.transform, x: wp.spatial_vector): ...
@wp.func
def transform_inertia(t: wp.transform, I: wp.spatial_matrix): ...
@wp.func
def boltzmann(a: float, b: float, alpha: float): ...
@wp.func
def smooth_max(a: float, b: float, eps: float): ...
@wp.func
def smooth_min(a: float, b: float, eps: float): ...
@wp.func
def leaky_max(a: float, b: float): ...
@wp.func
def leaky_min(a: float, b: float): ...
@wp.func
def vec_min(a: wp.vec3, b: wp.vec3): ...
@wp.func
def vec_max(a: wp.vec3, b: wp.vec3): ...
@wp.func
def vec_leaky_min(a: wp.vec3, b: wp.vec3): ...
@wp.func
def vec_leaky_max(a: wp.vec3, b: wp.vec3): ...
@wp.func
def vec_abs(a: wp.vec3): ...
def load_mesh(filename: str, method: str | None = None): ...
def visualize_meshes(meshes: list[tuple[list, list]], num_cols: int = 0, num_rows: int = 0, titles=None, scale_axes: bool = True, show_plot: bool = True): ...
