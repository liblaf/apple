import types
import warp as wp
from _typeshed import Incomplete
from typing import NamedTuple

class Tape:
    gradients: Incomplete
    launches: Incomplete
    scopes: Incomplete
    loss: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def backward(self, loss: wp.array | None = None, grads: dict[wp.array, wp.array] | None = None): ...
    def record_launch(self, kernel, dim, max_blocks, inputs, outputs, device, block_dim: int = 0, metadata=None) -> None: ...
    def record_func(self, backward, arrays) -> None: ...
    def record_scope_begin(self, scope_name, metadata=None) -> None: ...
    def record_scope_end(self, remove_scope_if_empty: bool = True) -> None: ...
    def get_adjoint(self, a): ...
    def reset(self) -> None: ...
    def zero(self) -> None: ...
    def visualize(self, filename: str | None = None, simplify_graph: bool = True, hide_readonly_arrays: bool = False, array_labels: dict[wp.array, str] | None = None, choose_longest_node_name: bool = True, ignore_graph_scopes: bool = False, track_inputs: list[wp.array] | None = None, track_outputs: list[wp.array] | None = None, track_input_names: list[str] | None = None, track_output_names: list[str] | None = None, graph_direction: str = 'LR') -> str: ...

class TapeVisitor:
    def emit_array_node(self, arr: wp.array, label: str, active_scope_stack: list[str], indent_level: int): ...
    def emit_kernel_launch_node(self, kernel: wp.Kernel, kernel_launch_id: str, launch_data: dict, rendered: bool, indent_level: int): ...
    def emit_edge_array_kernel(self, arr: wp.array, kernel_launch_id: str, kernel_input_id: int, indent_level: int): ...
    def emit_edge_kernel_array(self, kernel_launch_id: str, kernel_output_id: int, arr: wp.array, indent_level: int): ...
    def emit_edge_array_array(self, src: wp.array, dst: wp.array, indent_level: int): ...
    def emit_scope_begin(self, active_scope_id: int, active_scope_name: str, metadata: dict, indent_level: int): ...
    def emit_scope_end(self, indent_level: int): ...

def get_struct_vars(x: wp.codegen.StructInstance): ...

class GraphvizTapeVisitor(TapeVisitor):
    graphviz_lines: Incomplete
    indent_str: str
    scope_classes: Incomplete
    max_indent: int
    pointer_to_port: Incomplete
    edges: Incomplete
    array_nodes: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def sanitize(s): ...
    @staticmethod
    def dtype2str(dtype): ...
    def emit_array_node(self, arr: wp.array, label: str, active_scope_stack: list[str], indent_level: int): ...
    def emit_kernel_launch_node(self, kernel: wp.Kernel, kernel_launch_id: str, launch_data: dict, rendered: bool, indent_level: int): ...
    def emit_edge_array_kernel(self, arr_ptr: int, kernel_launch_id: str, kernel_input_id: int, indent_level: int): ...
    def emit_edge_kernel_array(self, kernel_launch_id: str, kernel_output_id: int, arr_ptr: int, indent_level: int): ...
    def emit_edge_array_array(self, src: wp.array, dst: wp.array, indent_level: int): ...
    def emit_scope_begin(self, active_scope_id: int, active_scope_name: str, metadata: dict, indent_level: int): ...
    def emit_scope_end(self, indent_level: int): ...

class ArrayStatsVisitor(TapeVisitor):

    class ArrayState(NamedTuple):
        mean: Incomplete
        std: Incomplete
        min: Incomplete
        max: Incomplete
    array_names: Incomplete
    launch_data: Incomplete
    launches: Incomplete
    array_value_stats: Incomplete
    array_grad_stats: Incomplete
    def __init__(self) -> None: ...
    def emit_array_node(self, arr: wp.array, label: str, active_scope_stack: list[str], indent_level: int): ...
    def emit_kernel_launch_node(self, kernel: wp.Kernel, kernel_launch_id: str, launch_data: dict, rendered: bool, indent_level: int): ...

class Launch(NamedTuple):
    id: Incomplete
    kernel: Incomplete
    dim: Incomplete
    max_blocks: Incomplete
    inputs: Incomplete
    outputs: Incomplete
    device: Incomplete
    block_dim: Incomplete
    metadata: Incomplete

class RepeatedSequence(NamedTuple):
    start: Incomplete
    end: Incomplete
    repetitions: Incomplete

def visit_tape(tape: Tape, visitor: TapeVisitor, simplify_graph: bool = True, hide_readonly_arrays: bool = False, array_labels: dict[wp.array, str] | None = None, choose_longest_node_name: bool = True, ignore_graph_scopes: bool = False, track_inputs: list[wp.array] | None = None, track_outputs: list[wp.array] | None = None, track_input_names: list[str] | None = None, track_output_names: list[str] | None = None): ...
def visualize_tape_graphviz(tape: Tape, filename: str, simplify_graph: bool = True, hide_readonly_arrays: bool = False, array_labels: dict[wp.array, str] | None = None, choose_longest_node_name: bool = True, ignore_graph_scopes: bool = False, track_inputs: list[wp.array] | None = None, track_outputs: list[wp.array] | None = None, track_input_names: list[str] | None = None, track_output_names: list[str] | None = None, graph_direction: str = 'LR') -> str: ...
